"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.unevaluatedItemsValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONArray_1 = require("../../../../util/isJSONArray");
function unevaluatedItemsValidator(schema, schemaPath, context) {
    if (!('unevaluatedItems' in schema)) {
        return null;
    }
    var unevaluatedItems = schema['unevaluatedItems'];
    var validator = context.validatorForSchema(unevaluatedItems, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/unevaluatedItems'], false));
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONArray_1.isJSONArray)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var prefixItemsAnnotationResult = annotationResults['prefixItems'];
        var itemsAnnotationResult = annotationResults['items'];
        var containsAnnotationResult = annotationResults['contains'];
        var unevaluatedItemsAnnotationResult = annotationResults['unevaluatedItems'];
        var firstUnevaluatedItem = 0;
        if (typeof prefixItemsAnnotationResult === 'number') {
            firstUnevaluatedItem = Math.max(firstUnevaluatedItem, prefixItemsAnnotationResult + 1);
        }
        if (typeof prefixItemsAnnotationResult === 'boolean' && prefixItemsAnnotationResult) {
            firstUnevaluatedItem = Math.max(firstUnevaluatedItem, instance.length);
        }
        if (typeof itemsAnnotationResult === 'boolean' && itemsAnnotationResult) {
            firstUnevaluatedItem = Math.max(firstUnevaluatedItem, instance.length);
        }
        if (typeof unevaluatedItemsAnnotationResult === 'boolean' && unevaluatedItemsAnnotationResult) {
            firstUnevaluatedItem = Math.max(firstUnevaluatedItem, instance.length);
        }
        var errors = [];
        var invalidIndices = [];
        for (var i = firstUnevaluatedItem; i < instance.length; i++) {
            if (containsAnnotationResult && containsAnnotationResult.includes(i)) {
                continue;
            }
            var output = validator(instance[i], "".concat(instanceLocation, "/").concat(i));
            if (!output.valid) {
                if (failFast) {
                    if (outputFormat === 'flag') {
                        return { valid: false };
                    }
                    else {
                        return {
                            valid: false,
                            schemaLocation: schemaLocation,
                            schemaKeyword: 'unevaluatedItems',
                            instanceLocation: instanceLocation,
                            message: formatMessage([output], [i]),
                            errors: [output]
                        };
                    }
                }
                errors.push(output);
                invalidIndices.push(i);
            }
        }
        if (errors.length === 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'unevaluatedItems',
                instanceLocation: instanceLocation,
                annotationResults: {
                    unevaluatedItems: true // TODO: only true if actually applied to items
                }
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'unevaluatedItems',
                    instanceLocation: instanceLocation,
                    message: formatMessage(errors, invalidIndices),
                    errors: errors
                };
            }
        }
    };
}
exports.unevaluatedItemsValidator = unevaluatedItemsValidator;
function formatMessage(errors, invalidIndices) {
    var message;
    if (invalidIndices.length === 1) {
        message = "has an invalid item at position ".concat(invalidIndices[0]);
    }
    else {
        message = "has invalid items at positions ".concat((0, formatList_1.formatList)(invalidIndices.map(function (invalidIndex) { return "".concat(invalidIndex); }), 'and'));
    }
    if (errors !== null) {
        message += " (".concat(errors.map(function (error) { return error.message; }).join('; '), ")");
    }
    return message;
}
exports.formatMessage = formatMessage;
