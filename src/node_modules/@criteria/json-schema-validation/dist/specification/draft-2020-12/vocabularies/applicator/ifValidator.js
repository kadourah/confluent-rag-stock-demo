"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.ifValidator = void 0;
var reduceAnnotationResults_1 = require("../reduceAnnotationResults");
function ifValidator(schema, schemaPath, context) {
    if (!('if' in schema)) {
        return null;
    }
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    var trueValidator = function (instance, instanceLocation) {
        return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
    };
    var ifSchema = schema['if'];
    var ifValidator = context.validatorForSchema(ifSchema, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/if'], false));
    var thenSchema = schema['then'];
    var thenValidator = thenSchema !== undefined ? context.validatorForSchema(thenSchema, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/then'], false)) : trueValidator;
    var elseSchema = schema['else'];
    var elseValidator = elseSchema !== undefined ? context.validatorForSchema(elseSchema, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/else'], false)) : trueValidator;
    return function (instance, instanceLocation) {
        var _a;
        var ifOutput = ifValidator(instance, instanceLocation);
        if (ifOutput.valid) {
            var thenOutput = thenValidator(instance, instanceLocation);
            if (thenOutput.valid) {
                if (thenValidator === null) {
                    return {
                        valid: true,
                        schemaLocation: schemaLocation,
                        instanceLocation: instanceLocation,
                        annotationResults: ifOutput.annotationResults
                    };
                }
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    instanceLocation: instanceLocation,
                    annotationResults: (0, reduceAnnotationResults_1.reduceAnnotationResults)(ifOutput.annotationResults, (_a = thenOutput.annotationResults) !== null && _a !== void 0 ? _a : {})
                };
            }
            else {
                return thenOutput;
            }
        }
        else {
            if (elseValidator === null) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    instanceLocation: instanceLocation
                };
            }
            var elseOutput = elseValidator(instance, instanceLocation);
            if (elseOutput.valid) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    instanceLocation: instanceLocation,
                    annotationResults: elseOutput.annotationResults
                };
            }
            else {
                return elseOutput;
            }
        }
    };
}
exports.ifValidator = ifValidator;
