"use strict";
exports.__esModule = true;
exports.multipleOfValidator = void 0;
var format_1 = require("../../../../util/format");
var isJSONNumber_1 = require("../../../../util/isJSONNumber");
function multipleOfValidator(schema, schemaPath, context) {
    if (!('multipleOf' in schema)) {
        return null;
    }
    var multipleOf = schema['multipleOf'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONNumber_1.isJSONNumber)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        if (multipleOf !== 0 ? Number.isInteger(instance / multipleOf) : false) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'multipleOf', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'multipleOf',
                    instanceLocation: instanceLocation,
                    message: "should be a multiple of ".concat(multipleOf, " but is ").concat((0, format_1.format)(instance), " instead")
                };
            }
        }
    };
}
exports.multipleOfValidator = multipleOfValidator;
