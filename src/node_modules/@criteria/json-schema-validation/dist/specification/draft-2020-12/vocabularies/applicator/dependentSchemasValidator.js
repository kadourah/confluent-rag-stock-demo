"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.dependentSchemasValidator = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
var reduceAnnotationResults_1 = require("../reduceAnnotationResults");
function dependentSchemasValidator(schema, schemaPath, context) {
    if (!('dependentSchemas' in schema)) {
        return null;
    }
    var dependentSchemas = schema['dependentSchemas'];
    var propertyValidators = Object.entries(dependentSchemas).map(function (_a) {
        var _b = __read(_a, 2), propertyName = _b[0], subschema = _b[1];
        var subschemaValidator = context.validatorForSchema(subschema, __spreadArray(__spreadArray([], __read(schemaPath), false), [
            "/dependentSchemas/".concat((0, json_pointer_1.escapeReferenceToken)(propertyName))
        ], false));
        return [propertyName, subschemaValidator];
    });
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var e_1, _a;
        if (!(0, isJSONObject_1.isJSONObject)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var validOutputs = new Map();
        var invalidPropertyNames = [];
        var errors = [];
        try {
            for (var propertyValidators_1 = __values(propertyValidators), propertyValidators_1_1 = propertyValidators_1.next(); !propertyValidators_1_1.done; propertyValidators_1_1 = propertyValidators_1.next()) {
                var _b = __read(propertyValidators_1_1.value, 2), propertyName = _b[0], validator = _b[1];
                if (!instance.hasOwnProperty(propertyName)) {
                    continue;
                }
                var output = validator(instance, instanceLocation);
                if (!output.valid && failFast) {
                    if (outputFormat === 'flag') {
                        return { valid: false };
                    }
                    else {
                        return {
                            valid: false,
                            schemaLocation: schemaLocation,
                            schemaKeyword: 'dependentSchemas',
                            instanceLocation: instanceLocation,
                            message: "is invalid against dependent schema of property '".concat(propertyName, "'"),
                            errors: [output]
                        };
                    }
                }
                if (output.valid) {
                    validOutputs.set(propertyName, output);
                }
                else {
                    invalidPropertyNames.push(propertyName);
                    errors.push(output);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (propertyValidators_1_1 && !propertyValidators_1_1.done && (_a = propertyValidators_1["return"])) _a.call(propertyValidators_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (errors.length === 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'dependentSchemas',
                instanceLocation: instanceLocation,
                annotationResults: Array.from(validOutputs.values())
                    .map(function (output) { var _a; return (_a = output.annotationResults) !== null && _a !== void 0 ? _a : {}; })
                    .reduce(reduceAnnotationResults_1.reduceAnnotationResults, {})
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'dependentSchemas',
                    instanceLocation: instanceLocation,
                    message: "is invalid against dependent schemas of properties ".concat((0, formatList_1.formatList)(invalidPropertyNames.map(function (propertyName) { return "'".concat(propertyName, "'"); }), 'and')),
                    errors: errors
                };
            }
        }
    };
}
exports.dependentSchemasValidator = dependentSchemasValidator;
