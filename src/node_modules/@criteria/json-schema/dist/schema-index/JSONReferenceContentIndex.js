"use strict";
exports.__esModule = true;
exports.JSONReferenceContentIndex = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var uri_1 = require("../util/uri");
var visitJSONReferences_1 = require("../util/visitJSONReferences");
// JSON Reference objects don't have their own identity.
// The are always access via JSON pointer from a containing object.
var JSONReferenceContentIndex = /** @class */ (function () {
    function JSONReferenceContentIndex(configuration) {
        this.shouldIndexObject = configuration.shouldIndexObject;
    }
    JSONReferenceContentIndex.prototype.isObjectIndexed = function (object) {
        return false;
    };
    JSONReferenceContentIndex.prototype.isURIIndexed = function (uri) {
        return false;
    };
    JSONReferenceContentIndex.prototype.indexedObjectWithURI = function (uri) {
        return undefined;
    };
    JSONReferenceContentIndex.prototype.infoForIndexedObject = function (value) {
        return undefined;
    };
    JSONReferenceContentIndex.prototype.addContentFromRoot = function (root, baseURI, rootMetadata) {
        var _this = this;
        var foundReferences = new Map();
        // technically shouldn't need this, but used for non-standard $refs
        (0, visitJSONReferences_1.visitJSONReferences)(root, {}, function (reference, location, state) {
            if (_this.isObjectIndexed(reference) || !_this.shouldIndexObject(reference)) {
                return;
            }
            var resolvedURI = (0, uri_1.resolveURIReference)(reference.$ref, baseURI);
            var i = location.lastIndexOf('/');
            var parent = location === '' ? null : (0, json_pointer_1.evaluateJSONPointer)(location.slice(0, i), root);
            var key = (0, json_pointer_1.unescapeReferenceToken)(location.slice(i + 1));
            foundReferences.set(reference, {
                resolvedURI: resolvedURI,
                parent: parent,
                key: key,
                metadata: rootMetadata,
                isDynamic: false,
                path: [location]
            });
        });
        return foundReferences;
    };
    return JSONReferenceContentIndex;
}());
exports.JSONReferenceContentIndex = JSONReferenceContentIndex;
