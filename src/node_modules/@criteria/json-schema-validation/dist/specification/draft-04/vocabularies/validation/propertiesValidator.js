"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.formatMessage = exports.propertiesValidator = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
function propertiesValidator(schema, schemaPath, context) {
    if (!('properties' in schema)) {
        return null;
    }
    var properties = schema['properties'];
    var propertyValidators = Object.keys(properties).map(function (propertyName) {
        var subschema = properties[propertyName];
        var subschemaValidator = context.validatorForSchema(subschema, __spreadArray(__spreadArray([], __read(schemaPath), false), [
            "/properties/".concat((0, json_pointer_1.escapeReferenceToken)(propertyName))
        ], false));
        return [propertyName, (0, json_pointer_1.escapeReferenceToken)(propertyName), subschemaValidator];
    });
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    if (outputFormat === 'flag') {
        return function validateInstance(instance, instanceLocation, annotationResults) {
            var e_1, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var validKeys = [];
            try {
                for (var propertyValidators_1 = __values(propertyValidators), propertyValidators_1_1 = propertyValidators_1.next(); !propertyValidators_1_1.done; propertyValidators_1_1 = propertyValidators_1.next()) {
                    var _b = __read(propertyValidators_1_1.value, 3), propertyName = _b[0], escapedPropertyName = _b[1], subschemaValidator = _b[2];
                    if (!instance.hasOwnProperty(propertyName)) {
                        continue;
                    }
                    var output = subschemaValidator(instance[propertyName], "".concat(instanceLocation, "/").concat(escapedPropertyName));
                    if (output.valid) {
                        validKeys.push(propertyName);
                    }
                    else {
                        return { valid: false };
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (propertyValidators_1_1 && !propertyValidators_1_1.done && (_a = propertyValidators_1["return"])) _a.call(propertyValidators_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'properties',
                instanceLocation: instanceLocation,
                annotationResults: {
                    properties: validKeys
                }
            };
        };
    }
    else {
        return function validateInstance(instance, instanceLocation, annotationResults) {
            var e_2, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var validKeys = [];
            var invalidPropertyNames = [];
            var errors = [];
            try {
                for (var propertyValidators_2 = __values(propertyValidators), propertyValidators_2_1 = propertyValidators_2.next(); !propertyValidators_2_1.done; propertyValidators_2_1 = propertyValidators_2.next()) {
                    var _b = __read(propertyValidators_2_1.value, 3), propertyName = _b[0], escapedPropertyName = _b[1], subschemaValidator = _b[2];
                    if (!instance.hasOwnProperty(propertyName)) {
                        continue;
                    }
                    var output = subschemaValidator(instance[propertyName], "".concat(instanceLocation, "/").concat(escapedPropertyName));
                    if (output.valid) {
                        validKeys.push(propertyName);
                    }
                    else {
                        if (failFast) {
                            return {
                                valid: false,
                                schemaLocation: schemaLocation,
                                schemaKeyword: 'properties',
                                instanceLocation: instanceLocation,
                                message: formatMessage([output], [propertyName]),
                                errors: [output]
                            };
                        }
                        invalidPropertyNames.push(propertyName);
                        errors.push(output);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (propertyValidators_2_1 && !propertyValidators_2_1.done && (_a = propertyValidators_2["return"])) _a.call(propertyValidators_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (errors.length === 0) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'properties',
                    instanceLocation: instanceLocation,
                    annotationResults: {
                        properties: validKeys
                    }
                };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'properties',
                    instanceLocation: instanceLocation,
                    message: formatMessage(errors, invalidPropertyNames),
                    errors: errors
                };
            }
        };
    }
}
exports.propertiesValidator = propertiesValidator;
function formatMessage(errors, invalidPropertyNames) {
    var message;
    if (invalidPropertyNames.length === 1) {
        message = "has an invalid property '".concat(invalidPropertyNames[0], "'");
    }
    else {
        message = "has invalid properties ".concat((0, formatList_1.formatList)(invalidPropertyNames.map(function (propertyName) { return "'".concat(propertyName, "'"); }), 'and'));
    }
    if (errors !== null) {
        message += " (".concat(errors.map(function (error) { return error.message; }).join('; '), ")");
    }
    return message;
}
exports.formatMessage = formatMessage;
