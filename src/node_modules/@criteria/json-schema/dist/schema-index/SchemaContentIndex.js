"use strict";
exports.__esModule = true;
exports.SchemaContentIndex = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var draft_04_1 = require("../draft-04");
var draft_06_1 = require("../draft-06");
var draft_07_1 = require("../draft-07");
var draft_2020_12_1 = require("../draft-2020-12");
var resolveID_1 = require("../specification/draft-04/resolveID");
var visitSubschemas_1 = require("../specification/draft-04/visitSubschemas");
var resolveID_2 = require("../specification/draft-06/resolveID");
var visitSubschemas_2 = require("../specification/draft-06/visitSubschemas");
var resolveID_3 = require("../specification/draft-07/resolveID");
var visitSubschemas_3 = require("../specification/draft-07/visitSubschemas");
var resolveID_4 = require("../specification/draft-2020-12/resolveID");
var visitSubschemas_4 = require("../specification/draft-2020-12/visitSubschemas");
var uri_1 = require("../util/uri");
var SchemaContentIndex = /** @class */ (function () {
    function SchemaContentIndex() {
        // Indexes schemas and { $ref }
        this.schemasByURI = new Map();
        this.schemasByAnchors = new Map();
        this.schemasByDynamicAnchors = new Map();
        this.infosBySchema = new Map();
    }
    SchemaContentIndex.prototype.isObjectIndexed = function (object) {
        if (this.infosBySchema.has(object)) {
            return true;
        }
        return false;
    };
    SchemaContentIndex.prototype.isURIIndexed = function (uri) {
        if (this.schemasByURI.has(uri)) {
            return true;
        }
        if (this.schemasByAnchors.has(uri)) {
            return true;
        }
        if (this.schemasByDynamicAnchors.has(uri)) {
            return true;
        }
        return false;
    };
    SchemaContentIndex.prototype.indexedObjectWithURI = function (uri) {
        var schema = this.schemasByURI.get(uri);
        if (schema !== undefined) {
            return schema;
        }
        schema = this.schemasByAnchors.get(uri);
        if (schema !== undefined) {
            return schema;
        }
        schema = this.schemasByDynamicAnchors.get(uri);
        if (schema !== undefined) {
            return schema;
        }
        return undefined;
    };
    SchemaContentIndex.prototype.infoForIndexedObject = function (value) {
        if (this.infosBySchema.has(value)) {
            return this.infosBySchema.get(value);
        }
        return undefined;
    };
    SchemaContentIndex.prototype.addContentFromRoot = function (root, baseURI, rootMetadata) {
        var _this = this;
        var _a;
        var foundReferences = new Map();
        var visitSubschemas = function (metaSchemaID) {
            switch (metaSchemaID) {
                case draft_04_1.metaSchemaID:
                    return visitSubschemas_1.visitSubschemas;
                case draft_06_1.metaSchemaID:
                    return visitSubschemas_2.visitSubschemas;
                case draft_07_1.metaSchemaID:
                    return visitSubschemas_3.visitSubschemas;
                case draft_2020_12_1.metaSchemaID:
                    return visitSubschemas_4.visitSubschemas;
                default:
                    return visitSubschemas_4.visitSubschemas;
            }
        };
        visitSubschemas(typeof root === 'object' && '$schema' in root
            ? (_a = root.$schema) !== null && _a !== void 0 ? _a : rootMetadata.metaSchemaID
            : rootMetadata.metaSchemaID)(root, {
            baseURI: baseURI,
            metadata: {
                metaSchemaID: rootMetadata.metaSchemaID
            }
        }, function (subschema, path, state) {
            if (typeof subschema === 'boolean') {
                return;
            }
            if (_this.infosBySchema.has(subschema)) {
                return;
            }
            var baseURI = state.baseURI, metaSchemaID = state.metadata.metaSchemaID;
            var $schema = '$schema' in subschema ? subschema.$schema : metaSchemaID;
            var $id;
            switch ($schema) {
                case draft_04_1.metaSchemaID: {
                    $id = (0, resolveID_1.resolveID)(subschema, baseURI);
                    if ($id) {
                        _this.schemasByURI.set($id, subschema);
                    }
                    break;
                }
                case draft_06_1.metaSchemaID: {
                    $id = (0, resolveID_2.resolveID)(subschema, baseURI);
                    if ($id) {
                        _this.schemasByURI.set($id, subschema);
                    }
                    break;
                }
                case draft_07_1.metaSchemaID: {
                    $id = (0, resolveID_3.resolveID)(subschema, baseURI);
                    if ($id) {
                        _this.schemasByURI.set($id, subschema);
                    }
                    break;
                }
                case draft_2020_12_1.metaSchemaID: {
                    $id = (0, resolveID_4.resolveID)(subschema, baseURI);
                    if ($id) {
                        _this.schemasByURI.set($id, subschema);
                    }
                    break;
                }
            }
            _this.infosBySchema.set(subschema, {
                baseURI: $id !== null && $id !== void 0 ? $id : baseURI,
                metadata: {
                    metaSchemaID: $schema
                }
            });
            state.baseURI = $id !== null && $id !== void 0 ? $id : baseURI;
            state.metadata = {
                metaSchemaID: $schema
            };
            var $anchor;
            if ('$anchor' in subschema && typeof subschema.$anchor === 'string') {
                $anchor = (0, uri_1.resolveURIReference)("#".concat(subschema.$anchor), $id !== null && $id !== void 0 ? $id : baseURI);
                _this.schemasByAnchors.set($anchor, subschema);
            }
            var $dynamicAnchor;
            if ('$dynamicAnchor' in subschema && typeof subschema.$dynamicAnchor === 'string') {
                $dynamicAnchor = (0, uri_1.resolveURIReference)("#".concat(subschema.$dynamicAnchor), $id !== null && $id !== void 0 ? $id : baseURI);
                _this.schemasByDynamicAnchors.set($dynamicAnchor, subschema);
            }
            if ('$ref' in subschema && typeof subschema.$ref === 'string') {
                var $ref = (0, uri_1.resolveURIReference)(subschema.$ref, $id !== null && $id !== void 0 ? $id : baseURI);
                // TODO: test location is from rootObject, where initial location supplied
                var location = path.join('');
                var i = location.lastIndexOf('/');
                var parent = location === '' ? null : (0, json_pointer_1.evaluateJSONPointer)(location.slice(0, i), root);
                var key = (0, json_pointer_1.unescapeReferenceToken)(location.slice(i + 1));
                // Don't retrieve yet, because it may resolve to a nested schema with an id
                foundReferences.set(subschema, {
                    resolvedURI: $ref,
                    parent: parent,
                    key: key,
                    metadata: state.metadata,
                    isDynamic: false,
                    path: path
                });
            }
            if ('$dynamicRef' in subschema && typeof subschema.$dynamicRef === 'string') {
                var $dynamicRef = (0, uri_1.resolveURIReference)(subschema.$dynamicRef, $id !== null && $id !== void 0 ? $id : baseURI);
                // TODO: test location is from rootObject, where initial location supplied
                var location = path.join('');
                var i = location.lastIndexOf('/');
                var parent = location === '' ? null : (0, json_pointer_1.evaluateJSONPointer)(location.slice(0, i), root);
                var key = (0, json_pointer_1.unescapeReferenceToken)(location.slice(i + 1));
                // Don't retrieve yet, because it may resolve to a nested schema with an id
                foundReferences.set(subschema, {
                    resolvedURI: $dynamicRef,
                    parent: parent,
                    key: key,
                    metadata: state.metadata,
                    isDynamic: true,
                    path: path
                });
            }
        });
        return foundReferences;
    };
    return SchemaContentIndex;
}());
exports.SchemaContentIndex = SchemaContentIndex;
