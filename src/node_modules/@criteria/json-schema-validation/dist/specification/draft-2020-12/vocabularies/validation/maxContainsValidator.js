"use strict";
exports.__esModule = true;
exports.maxContainsValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONArray_1 = require("../../../../util/isJSONArray");
var formatErrorMessage = function (maxContains, indices) {
    var maxContainsString = maxContains === 1 ? '1 item' : "".concat(maxContains, " items");
    var indicesString = indices.length === 1
        ? "".concat(indices[0])
        : (0, formatList_1.formatList)(indices.map(function (index) { return "".concat(index); }), 'and');
    return "should have up to ".concat(maxContainsString, " that validate against subschema but has ").concat(indices.length, " at ").concat(indicesString, " instead");
};
function maxContainsValidator(schema, schemaPath, context) {
    if (!('maxContains' in schema)) {
        return null;
    }
    if (!('contains' in schema)) {
        return null;
    }
    var maxContains = schema['maxContains'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONArray_1.isJSONArray)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var containsAnnotationResult = annotationResults['contains']; // array of matched indices
        var count = Array.isArray(containsAnnotationResult) ? containsAnnotationResult.length : 0;
        if (count <= maxContains) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'multipleOf', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'maxContains',
                    instanceLocation: instanceLocation,
                    message: formatErrorMessage(maxContains, containsAnnotationResult !== null && containsAnnotationResult !== void 0 ? containsAnnotationResult : [])
                };
            }
        }
    };
}
exports.maxContainsValidator = maxContainsValidator;
