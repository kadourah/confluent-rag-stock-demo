"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.dependentRequiredValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
function dependentRequiredValidator(schema, schemaPath, context) {
    if (!('dependentRequired' in schema)) {
        return null;
    }
    var dependentRequired = schema['dependentRequired'];
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var e_1, _a, e_2, _b;
        if (!(0, isJSONObject_1.isJSONObject)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var missingProperties = [];
        try {
            for (var _c = __values(Object.entries(dependentRequired)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), propertyName = _e[0], dependencies = _e[1];
                if (!instance.hasOwnProperty(propertyName)) {
                    continue;
                }
                try {
                    for (var dependencies_1 = (e_2 = void 0, __values(dependencies)), dependencies_1_1 = dependencies_1.next(); !dependencies_1_1.done; dependencies_1_1 = dependencies_1.next()) {
                        var dependency = dependencies_1_1.value;
                        if (!instance.hasOwnProperty(dependency)) {
                            if (failFast) {
                                if (outputFormat === 'flag') {
                                    return { valid: false };
                                }
                                else {
                                    return {
                                        valid: false,
                                        schemaLocation: schemaLocation,
                                        schemaKeyword: 'dependentRequired',
                                        instanceLocation: instanceLocation,
                                        message: "is missing '".concat(dependency, "'")
                                    };
                                }
                            }
                            missingProperties.push(dependency);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (dependencies_1_1 && !dependencies_1_1.done && (_b = dependencies_1["return"])) _b.call(dependencies_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (missingProperties.length === 0) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'dependentRequired', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'dependentRequired',
                    instanceLocation: instanceLocation,
                    message: "is mising ".concat((0, formatList_1.formatList)(missingProperties.map(function (missingProperty) { return "'".concat(missingProperty, "'"); }), 'and'))
                };
            }
        }
    };
}
exports.dependentRequiredValidator = dependentRequiredValidator;
