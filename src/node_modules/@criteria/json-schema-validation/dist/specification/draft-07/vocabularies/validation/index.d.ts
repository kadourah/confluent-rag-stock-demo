import { formatValidator } from './formatValidator';
import { ifValidator } from './ifValidator';
export declare const validationValidators: {
    if: typeof ifValidator;
    format: typeof formatValidator;
    contains: typeof import("../../../draft-06/vocabularies/validation/containsValidator").containsValidator;
    exclusiveMinimum: typeof import("../../../draft-06/vocabularies/validation/exclusiveMinimumValidator").exclusiveMinimumValidator;
    exclusiveMaximum: typeof import("../../../draft-06/vocabularies/validation/exclusiveMaximumValidator").exclusiveMaximumValidator;
    propertyNames: typeof import("../../../draft-06/vocabularies/validation/propertyNamesValidator").propertyNamesValidator;
    type: typeof import("../../../draft-04/vocabularies/validation/typeValidator").typeValidator;
    enum: typeof import("../../../draft-04/vocabularies/validation/enumValidator").enumValidator;
    const: typeof import("../../../draft-04/vocabularies/validation/constValidator").constValidator;
    pattern: typeof import("../../../draft-04/vocabularies/validation/patternValidator").patternValidator;
    minLength: typeof import("../../../draft-04/vocabularies/validation/minLengthValidator").minLengthValidator;
    maxLength: typeof import("../../../draft-04/vocabularies/validation/maxLengthValidator").maxLengthValidator;
    multipleOf: typeof import("../../../draft-04/vocabularies/validation/multipleOfValidator").multipleOfValidator;
    maximum: typeof import("../../../draft-04/vocabularies/validation/maximumValidator").maximumValidator;
    minimum: typeof import("../../../draft-04/vocabularies/validation/minimumValidator").minimumValidator;
    dependencies: typeof import("../../../draft-04/vocabularies/validation/dependenciesValidator").dependenciesValidator;
    maxProperties: typeof import("../../../draft-04/vocabularies/validation/maxPropertiesValidator").maxPropertiesValidator;
    minProperties: typeof import("../../../draft-04/vocabularies/validation/minPropertiesValidator").minPropertiesValidator;
    required: typeof import("../../../draft-04/vocabularies/validation/requiredValidator").requiredValidator;
    items: typeof import("../../../draft-04/vocabularies/validation/itemsValidator").itemsValidator;
    additionalItems: typeof import("../../../draft-04/vocabularies/validation/additionalItemsValidator").additionalItemsValidator;
    maxItems: typeof import("../../../draft-04/vocabularies/validation/maxItemsValidator").maxItemsValidator;
    minItems: typeof import("../../../draft-04/vocabularies/validation/minItemsValidator").minItemsValidator;
    uniqueItems: typeof import("../../../draft-04/vocabularies/validation/uniqueItemsValidator").uniqueItemsValidator;
    properties: typeof import("../../../draft-04/vocabularies/validation/propertiesValidator").propertiesValidator;
    patternProperties: typeof import("../../../draft-04/vocabularies/validation/patternPropertiesValidator").patternPropertiesValidator;
    additionalProperties: typeof import("../../../draft-04/vocabularies/validation/additionalPropertiesValidator").additionalPropertiesValidator;
    allOf: typeof import("../../../draft-04/vocabularies/validation/allOfValidator").allOfValidator;
    anyOf: typeof import("../../../draft-04/vocabularies/validation/anyOfValidator").anyOfValidator;
    oneOf: typeof import("../../../draft-04/vocabularies/validation/oneOfValidator").oneOfValidator;
    not: typeof import("../../../draft-04/vocabularies/validation/notValidator").notValidator;
};
