"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.containsValidator = void 0;
var isJSONArray_1 = require("../../../../util/isJSONArray");
function containsValidator(schema, schemaPath, context) {
    if (!('contains' in schema)) {
        return null;
    }
    var contains = schema['contains'];
    var validator = context.validatorForSchema(contains, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/contains'], false));
    var minContains = 1;
    if ('minContains' in schema) {
        minContains = Math.min(minContains, schema['minContains']);
    }
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONArray_1.isJSONArray)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation, schemaKeyword: 'contains' };
        }
        var outputs = [];
        var matchedIndices = [];
        for (var index = 0; index < instance.length; index++) {
            var output = validator(instance[index], "".concat(instanceLocation, "/").concat(index));
            outputs.push(output);
            if (output.valid) {
                matchedIndices.push(index);
            }
        }
        if (matchedIndices.length >= minContains) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'contains',
                instanceLocation: instanceLocation,
                annotationResults: {
                    contains: matchedIndices
                }
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'contains',
                    instanceLocation: instanceLocation,
                    message: formatMessage(),
                    errors: outputs.filter(function (output) { return !output.valid; })
                };
            }
        }
    };
}
exports.containsValidator = containsValidator;
function formatMessage() {
    return 'does not contain an item that validates against a subschema';
}
exports.formatMessage = formatMessage;
