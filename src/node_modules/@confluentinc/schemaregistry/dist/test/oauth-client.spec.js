"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const oauth_client_1 = require("../oauth/oauth-client");
const simple_oauth2_1 = require("simple-oauth2");
const globals_1 = require("@jest/globals");
const retryHelper = __importStar(require("@confluentinc/schemaregistry/retry-helper"));
const test_constants_1 = require("./test-constants");
const boom_1 = require("@hapi/boom");
globals_1.jest.mock('simple-oauth2');
const mockError = (0, boom_1.boomify)(new Error('Error Message'), { statusCode: 429 });
const mockErrorNonRetry = (0, boom_1.boomify)(new Error('Error Message'), { statusCode: 401 });
(0, globals_1.describe)('OAuthClient', () => {
    const clientId = 'clientId';
    const clientSecret = 'clientSecret';
    const tokenHost = 'https://example.com';
    const tokenPath = '/token';
    const scope = 'scope';
    let oauthClient;
    let clientCredentials;
    const mockToken = {
        token: { access_token: 'mockAccessToken' },
        expired: (number) => false,
        refresh: globals_1.jest.fn(async (params, httpOptions) => {
            return {
                ...mockToken,
                token: {
                    ...mockToken.token,
                    access_token: 'newMockAccessToken',
                },
            };
        }),
        revoke: globals_1.jest.fn(async (tokenType, httpOptions) => {
            console.log(`Revoke called for token type: ${tokenType}`);
        }),
        revokeAll: globals_1.jest.fn(async (httpOptions) => {
            console.log(`Revoke all tokens called`);
        }),
    };
    const mockTokenExpired = {
        token: { access_token: 'mockAccessToken' },
        expired: (number) => true,
        refresh: globals_1.jest.fn(async (params, httpOptions) => {
            return {
                ...mockToken,
                token: {
                    ...mockToken.token,
                    access_token: 'newMockAccessToken',
                },
            };
        }),
        revoke: globals_1.jest.fn(async (tokenType, httpOptions) => {
            console.log(`Revoke called for token type: ${tokenType}`);
        }),
        revokeAll: globals_1.jest.fn(async (httpOptions) => {
            console.log(`Revoke all tokens called`);
        }),
    };
    (0, globals_1.beforeEach)(() => {
        oauthClient = new oauth_client_1.OAuthClient(clientId, clientSecret, tokenHost, tokenPath, scope, test_constants_1.maxRetries, test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs);
        clientCredentials = simple_oauth2_1.ClientCredentials;
        globals_1.jest.spyOn(retryHelper, 'isRetriable');
        globals_1.jest.spyOn(retryHelper, 'fullJitter');
        globals_1.jest.spyOn(retryHelper, 'sleep');
        globals_1.jest.spyOn(oauthClient, 'generateAccessToken');
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.it)('should retrieve an access token successfully', async () => {
        clientCredentials.prototype.getToken.mockResolvedValue(mockToken);
        const token = await oauthClient.getAccessToken();
        (0, globals_1.expect)(token).toBe('mockAccessToken');
    });
    (0, globals_1.it)('should retry on retriable errors and succeed', async () => {
        // Fail twice with retriable errors, then succeed
        clientCredentials.prototype.getToken
            .mockRejectedValueOnce(mockError)
            .mockRejectedValueOnce(mockError)
            .mockResolvedValue(mockToken);
        const token = await oauthClient.getAccessToken();
        (0, globals_1.expect)(token).toBe('mockAccessToken');
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 0);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 1);
        (0, globals_1.expect)(retryHelper.isRetriable).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.sleep).toHaveBeenCalledTimes(test_constants_1.maxRetries);
    });
    (0, globals_1.it)('should fail immediately on non-retriable errors', async () => {
        clientCredentials.prototype.getToken.mockRejectedValueOnce(mockErrorNonRetry);
        await (0, globals_1.expect)(oauthClient.getAccessToken()).rejects.toThrowError();
        (0, globals_1.expect)(retryHelper.isRetriable).toHaveBeenCalledTimes(1);
        (0, globals_1.expect)(retryHelper.fullJitter).not.toHaveBeenCalled();
        (0, globals_1.expect)(retryHelper.sleep).not.toHaveBeenCalled();
    });
    (0, globals_1.it)('should fail after exhausting all retries', async () => {
        clientCredentials.prototype.getToken.mockRejectedValue(mockError);
        await (0, globals_1.expect)(oauthClient.getAccessToken()).rejects.toThrowError();
        (0, globals_1.expect)(retryHelper.isRetriable).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 0);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 1);
        (0, globals_1.expect)(retryHelper.sleep).toHaveBeenCalledTimes(test_constants_1.maxRetries);
    });
    (0, globals_1.it)('should not refresh token when not expired', async () => {
        clientCredentials.prototype.getToken.mockResolvedValue(mockToken);
        await oauthClient.getAccessToken();
        await oauthClient.getAccessToken();
        (0, globals_1.expect)(oauthClient.generateAccessToken).toHaveBeenCalledTimes(1);
    });
    (0, globals_1.it)('should refresh token when expired', async () => {
        clientCredentials.prototype.getToken.mockResolvedValue(mockTokenExpired);
        await oauthClient.getAccessToken();
        await oauthClient.getAccessToken();
        (0, globals_1.expect)(oauthClient.generateAccessToken).toHaveBeenCalledTimes(2);
    });
});
