"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalKmsClient = void 0;
const encrypt_executor_1 = require("../encrypt-executor");
const Hkdf = __importStar(require("../tink/hkdf"));
const local_driver_1 = require("./local-driver");
const aes_gcm_pb_1 = require("../tink/proto/aes_gcm_pb");
const protobuf_1 = require("@bufbuild/protobuf");
class LocalKmsClient {
    constructor(secret) {
        this.secret = secret;
        this.cryptor = new encrypt_executor_1.Cryptor(encrypt_executor_1.DekFormat.AES128_GCM);
    }
    async getKey() {
        const rawKey = await Hkdf.compute(16, 'SHA-256', Buffer.from(this.secret, 'utf8'), new Uint8Array(0));
        const aesGcmKey = (0, protobuf_1.create)(aes_gcm_pb_1.AesGcmKeySchema, {
            version: 0,
            keyValue: rawKey
        });
        return Buffer.from((0, protobuf_1.toBinary)(aes_gcm_pb_1.AesGcmKeySchema, aesGcmKey));
    }
    supported(keyUri) {
        return keyUri.startsWith(local_driver_1.LocalKmsDriver.PREFIX);
    }
    async encrypt(plaintext) {
        return this.cryptor.encrypt(await this.getKey(), plaintext);
    }
    async decrypt(ciphertext) {
        return this.cryptor.decrypt(await this.getKey(), ciphertext);
    }
}
exports.LocalKmsClient = LocalKmsClient;
