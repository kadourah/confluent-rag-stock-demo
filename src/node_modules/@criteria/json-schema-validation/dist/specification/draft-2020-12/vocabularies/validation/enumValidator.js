"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.enumValidator = void 0;
var format_1 = require("../../../../util/format");
var formatList_1 = require("../../../../util/formatList");
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
function enumValidator(schema, schemaPath, context) {
    if (!('enum' in schema)) {
        return null;
    }
    var enumValues = schema['enum'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var e_1, _a;
        try {
            for (var enumValues_1 = __values(enumValues), enumValues_1_1 = enumValues_1.next(); !enumValues_1_1.done; enumValues_1_1 = enumValues_1.next()) {
                var enumValue = enumValues_1_1.value;
                if ((0, fast_deep_equal_1["default"])(instance, enumValue)) {
                    return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (enumValues_1_1 && !enumValues_1_1.done && (_a = enumValues_1["return"])) _a.call(enumValues_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (outputFormat === 'flag') {
            return { valid: false };
        }
        else {
            var message = void 0;
            if (enumValues.length === 0) {
                message = "should not be defined but is ".concat((0, format_1.format)(instance), " instead");
            }
            else if (enumValues.length === 1) {
                message = "should be ".concat((0, format_1.format)(enumValues[0]), " but is ").concat((0, format_1.format)(instance), " instead");
            }
            else {
                message = "should be one of ".concat((0, formatList_1.formatList)(enumValues.map(function (value) { return (0, format_1.format)(value); }), 'or'), " but is ").concat((0, format_1.format)(instance), " instead");
            }
            return {
                valid: false,
                schemaLocation: schemaLocation,
                schemaKeyword: 'enum',
                instanceLocation: instanceLocation,
                message: message
            };
        }
    };
}
exports.enumValidator = enumValidator;
