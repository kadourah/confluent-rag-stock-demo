import { JSONSchema, metaSchemaID } from '@criteria/json-schema/draft-2020-12';
import { MaybePromise } from '../../util/promises';
import { AsyncValidateOptions, JSONValidator, ValidateOptions } from '../../validation/jsonValidator';
export { metaSchemaID };
export declare function jsonValidator(schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID' | 'retrieve'>): JSONValidator;
export declare function jsonValidator(schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): MaybePromise<JSONValidator>;
export declare function jsonValidator(schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID'>): JSONValidator;
export declare function jsonValidatorAsync(schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): Promise<JSONValidator>;
export declare function validateJSON(instance: unknown, schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID' | 'retrieve'>): void;
export declare function validateJSON(instance: unknown, schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): MaybePromise<void>;
export declare function validateJSON(instance: unknown, schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID'>): void;
export declare function validateJSONAsync(instance: unknown, schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): Promise<void>;
export declare function isJSONValid(instance: unknown, schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID' | 'retrieve'>): boolean;
export declare function isJSONValid(instance: unknown, schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): MaybePromise<boolean>;
export declare function isJSONValid(instance: unknown, schema: JSONSchema, options?: Omit<ValidateOptions, 'defaultMetaSchemaID'>): boolean;
export declare function isJSONValidAsync(instance: unknown, schema: JSONSchema, options?: Omit<AsyncValidateOptions, 'defaultMetaSchemaID'>): Promise<boolean>;
