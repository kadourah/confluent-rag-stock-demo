"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.uniqueItemsValidator = void 0;
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
var formatList_1 = require("../../../../util/formatList");
var isJSONArray_1 = require("../../../../util/isJSONArray");
function uniqueItemsValidator(schema, schemaPath, context) {
    if (!('uniqueItems' in schema)) {
        return null;
    }
    var uniqueItems = schema['uniqueItems'];
    if (!uniqueItems) {
        return null;
    }
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONArray_1.isJSONArray)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var matchingPairs = [];
        for (var i = 0; i < instance.length; i++) {
            for (var j = i + 1; j < instance.length; j++) {
                if ((0, fast_deep_equal_1["default"])(instance[i], instance[j])) {
                    if (failFast) {
                        if (outputFormat === 'flag') {
                            return { valid: false };
                        }
                        else {
                            return {
                                valid: false,
                                schemaLocation: schemaLocation,
                                schemaKeyword: 'uniqueItems',
                                instanceLocation: instanceLocation,
                                message: "should have unique items but items at ".concat(i, " and ").concat(j, " are equal instead")
                            };
                        }
                    }
                    matchingPairs.push([i, j]);
                }
            }
        }
        if (matchingPairs.length === 0) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'uniqueItems', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'uniqueItems',
                    instanceLocation: instanceLocation,
                    message: "should have unique items but ".concat((0, formatList_1.formatList)(matchingPairs.map(function (pair) { return "items at ".concat(pair[0], " and ").concat(pair[1], " are equal"); }), 'and'), " instead")
                };
            }
        }
    };
}
exports.uniqueItemsValidator = uniqueItemsValidator;
