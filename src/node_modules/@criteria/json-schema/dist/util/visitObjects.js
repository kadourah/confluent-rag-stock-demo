"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.visitObjects = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
function visitObjects(value, visitor) {
    // detects circular references
    var seen = new WeakSet();
    var visitObject = function (object, location) {
        if (seen.has(object)) {
            return;
        }
        seen.add(object);
        visitor(object, location, function () {
            var e_1, _a;
            try {
                for (var _b = __values(Object.entries(object)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], value_1 = _d[1];
                    visitValue(value_1, "".concat(location, "/").concat((0, json_pointer_1.escapeReferenceToken)(key)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    };
    var visitValue = function (value, location) {
        if (typeof value === 'object' && value !== null && !ArrayBuffer.isView(value)) {
            if (Array.isArray(value)) {
                value.forEach(function (element, index) { return visitValue(element, "".concat(location, "/").concat(index)); });
            }
            else {
                visitObject(value, location);
            }
        }
    };
    visitValue(value, '');
}
exports.visitObjects = visitObjects;
