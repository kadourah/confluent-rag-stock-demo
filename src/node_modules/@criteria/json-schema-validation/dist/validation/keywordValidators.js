"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.keywordValidatorsForMetaSchemaIDFactory = void 0;
var json_schema_1 = require("@criteria/json-schema");
var SchemaError_1 = require("../errors/SchemaError");
var core_1 = require("../specification/draft-04/vocabularies/core");
var validation_1 = require("../specification/draft-04/vocabularies/validation");
var core_2 = require("../specification/draft-06/vocabularies/core");
var validation_2 = require("../specification/draft-06/vocabularies/validation");
var core_3 = require("../specification/draft-07/vocabularies/core");
var validation_3 = require("../specification/draft-07/vocabularies/validation");
var applicator_1 = require("../specification/draft-2020-12/vocabularies/applicator");
var core_4 = require("../specification/draft-2020-12/vocabularies/core");
var format_assertion_1 = require("../specification/draft-2020-12/vocabularies/format-assertion");
var unevaluated_1 = require("../specification/draft-2020-12/vocabularies/unevaluated");
var validation_4 = require("../specification/draft-2020-12/vocabularies/validation");
function keywordValidatorsForMetaSchemaIDFactory(_a) {
    var assertFormat = _a.assertFormat, retrieve = _a.retrieve;
    var cache = new Map();
    return function (metaSchemaID) {
        var e_1, _a, e_2, _b;
        var _c, _d;
        if (cache.has(metaSchemaID)) {
            return cache.get(metaSchemaID);
        }
        if (metaSchemaID === json_schema_1.metaSchemaIDDraft04) {
            var validators_1 = __assign(__assign({}, core_1.coreValidators), validation_1.validationValidators);
            cache.set(metaSchemaID, validators_1);
            return validators_1;
        }
        if (metaSchemaID === json_schema_1.metaSchemaIDDraft06) {
            var validators_2 = __assign(__assign({}, core_2.coreValidators), validation_2.validationValidators);
            cache.set(metaSchemaID, validators_2);
            return validators_2;
        }
        if (metaSchemaID === json_schema_1.metaSchemaIDDraft07) {
            var validators_3 = __assign(__assign({}, core_3.coreValidators), validation_3.validationValidators);
            cache.set(metaSchemaID, validators_3);
            return validators_3;
        }
        var validators = {};
        // order is important here due to keyword interdependence
        // applicator before validation, so maxContains and minContains can access contains annotation results
        // add unevaluated keywords last
        var draft2020_12Validators = {
            'https://json-schema.org/draft/2020-12/vocab/core': core_4.coreValidators,
            'https://json-schema.org/draft/2020-12/vocab/applicator': applicator_1.applicatorValidators,
            'https://json-schema.org/draft/2020-12/vocab/validation': validation_4.validationValidators,
            'https://json-schema.org/draft/2020-12/vocab/meta-data': {},
            'https://json-schema.org/draft/2020-12/vocab/format-annotation': assertFormat
                ? format_assertion_1.formatAssertionValidators
                : {},
            'https://json-schema.org/draft/2020-12/vocab/format-assertion': format_assertion_1.formatAssertionValidators,
            'https://json-schema.org/draft/2020-12/vocab/content': {},
            'https://json-schema.org/draft/2020-12/vocab/unevaluated': unevaluated_1.unevaluatedValidators
        };
        var metaSchema = retrieve(metaSchemaID);
        var vocabularies = Object.keys((_c = metaSchema.$vocabulary) !== null && _c !== void 0 ? _c : {});
        try {
            for (var _e = __values(Object.entries(draft2020_12Validators)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var _g = __read(_f.value, 2), vocabulary = _g[0], vocabularyValidators = _g[1];
                if (vocabularies.includes(vocabulary)) {
                    validators = __assign(__assign({}, validators), vocabularyValidators);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e["return"])) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _h = __values(Object.entries((_d = metaSchema.$vocabulary) !== null && _d !== void 0 ? _d : {})), _j = _h.next(); !_j.done; _j = _h.next()) {
                var _k = __read(_j.value, 2), vocabularyKey = _k[0], vocabularyRequired = _k[1];
                if (!Object.keys(draft2020_12Validators).includes(vocabularyKey)) {
                    // unknown vocabulary
                    if (vocabularyRequired) {
                        throw new SchemaError_1.SchemaError("Unsupported vocabulary: ".concat(vocabularyKey));
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_b = _h["return"])) _b.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        cache.set(metaSchemaID, validators);
        return validators;
    };
}
exports.keywordValidatorsForMetaSchemaIDFactory = keywordValidatorsForMetaSchemaIDFactory;
