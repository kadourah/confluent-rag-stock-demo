"use strict";
exports.__esModule = true;
exports.minPropertiesValidator = void 0;
var isJSONObject_1 = require("../../../../util/isJSONObject");
function minPropertiesValidator(schema, schemaPath, context) {
    if (!('minProperties' in schema)) {
        return null;
    }
    var minProperties = schema['minProperties'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONObject_1.isJSONObject)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var count = Object.keys(instance).length;
        if (count >= minProperties) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'minProperties', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'minProperties',
                    instanceLocation: instanceLocation,
                    message: minProperties === 1
                        ? "should have at least 1 property but has ".concat(count, " instead")
                        : "should have at least ".concat(minProperties, " properties but has ").concat(count, " instead")
                };
            }
        }
    };
}
exports.minPropertiesValidator = minPropertiesValidator;
