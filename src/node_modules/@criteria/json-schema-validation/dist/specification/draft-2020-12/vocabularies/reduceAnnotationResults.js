"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.reduceAnnotationResults = void 0;
function reduceAnnotationResults(lhs, rhs) {
    var _a, _b, _c, _d;
    if (rhs === undefined) {
        return lhs !== null && lhs !== void 0 ? lhs : {};
    }
    var properties = rhs.properties, patternProperties = rhs.patternProperties, additionalProperties = rhs.additionalProperties, unevaluatedProperties = rhs.unevaluatedProperties, items = rhs.items, prefixItems = rhs.prefixItems, contains = rhs.contains, unevaluatedItems = rhs.unevaluatedItems, rest = __rest(rhs, ["properties", "patternProperties", "additionalProperties", "unevaluatedProperties", "items", "prefixItems", "contains", "unevaluatedItems"]);
    var result = Object.assign({}, lhs, rest);
    if (properties !== undefined) {
        if (result.properties !== undefined) {
            (_a = result.properties).push.apply(_a, __spreadArray([], __read(properties), false));
        }
        else {
            result.properties = properties;
        }
    }
    if (patternProperties !== undefined) {
        if (result.patternProperties !== undefined) {
            (_b = result.patternProperties).push.apply(_b, __spreadArray([], __read(patternProperties), false));
        }
        else {
            result.patternProperties = patternProperties;
        }
    }
    if (additionalProperties !== undefined) {
        if (result.additionalProperties !== undefined) {
            (_c = result.additionalProperties).push.apply(_c, __spreadArray([], __read(additionalProperties), false));
        }
        else {
            result.additionalProperties = additionalProperties;
        }
    }
    if (unevaluatedProperties !== undefined) {
        if (result.unevaluatedProperties !== undefined) {
            (_d = result.unevaluatedProperties).push.apply(_d, __spreadArray([], __read(unevaluatedProperties), false));
        }
        else {
            result.unevaluatedProperties = unevaluatedProperties;
        }
    }
    if (items !== undefined) {
        if (result.items !== undefined) {
            result.items = reduceItems(result.items, items);
        }
        else {
            result.items = items;
        }
    }
    if (prefixItems !== undefined) {
        if (result.prefixItems !== undefined) {
            result.prefixItems = reduceItems(result.prefixItems, prefixItems);
        }
        else {
            result.prefixItems = prefixItems;
        }
    }
    if (contains !== undefined) {
        if (result.contains !== undefined) {
            result.contains = Array.from(new Set(__spreadArray(__spreadArray([], __read(result.contains), false), __read(contains), false)));
        }
        else {
            result.contains = contains;
        }
    }
    if (unevaluatedItems !== undefined) {
        if (result.unevaluatedItems !== undefined) {
            result.unevaluatedItems = reduceItems(result.unevaluatedItems, unevaluatedItems);
        }
        else {
            result.unevaluatedItems = unevaluatedItems;
        }
    }
    return result;
}
exports.reduceAnnotationResults = reduceAnnotationResults;
function reduceItems(lhs, rhs) {
    if (lhs === true) {
        return true;
    }
    if (rhs === true) {
        return true;
    }
    if (typeof lhs === 'number' && typeof rhs === 'number') {
        return Math.max(lhs, rhs);
    }
    if (typeof lhs === 'number') {
        return lhs;
    }
    if (typeof rhs === 'number') {
        return rhs;
    }
    return undefined;
}
