"use strict";
/**
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AesSiv = void 0;
exports.fromRawKey = fromRawKey;
const aead_1 = require("./aead");
// @ts-expect-error miscreant does not have types
const miscreant_esm_1 = require("@hackbg/miscreant-esm");
const crypto = __importStar(require("crypto"));
/**
 * Implementation of AES-SIV.
 *
 */
class AesSiv extends aead_1.Aead {
    constructor(key) {
        super();
        this.key = key;
    }
    /**
     */
    async encrypt(plaintext, associatedData) {
        let key = await miscreant_esm_1.SIV.importKey(this.key, "AES-CMAC-SIV", new miscreant_esm_1.WebCryptoProvider(crypto));
        return key.seal(plaintext, [associatedData]);
    }
    /**
     */
    async decrypt(ciphertext, associatedData) {
        let key = await miscreant_esm_1.SIV.importKey(this.key, "AES-CMAC-SIV", new miscreant_esm_1.WebCryptoProvider(crypto));
        return key.open(ciphertext, [associatedData]);
    }
}
exports.AesSiv = AesSiv;
async function fromRawKey(key) {
    return new AesSiv(key);
}
