"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.additionalPropertiesValidator = exports.validatorForNoAdditionalProperties = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
function validatorForNoAdditionalProperties(schema, schemaPath, context) {
    var _a, _b;
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    var properties = (_a = schema['properties']) !== null && _a !== void 0 ? _a : {};
    var expectedPropertyNames = Object.keys(properties);
    var patternProperties = (_b = schema['patternProperties']) !== null && _b !== void 0 ? _b : {};
    var expectedPatterns = Object.keys(patternProperties).map(function (pattern) { return new RegExp(pattern); });
    if (outputFormat === 'flag') {
        return function (instance, instanceLocation, annotationResults) {
            var e_1, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var _loop_1 = function (propertyName) {
                if (expectedPropertyNames.includes(propertyName)) {
                    return "continue";
                }
                if (expectedPatterns.some(function (regexp) { return regexp.test(propertyName); })) {
                    return "continue";
                }
                return { value: { valid: false } };
            };
            try {
                for (var _b = __values(Object.keys(instance)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var propertyName = _c.value;
                    var state_1 = _loop_1(propertyName);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'additionalProperties', instanceLocation: instanceLocation };
        };
    }
    else {
        return function (instance, instanceLocation, annotationResults) {
            var e_2, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var invalidPropertyNames = [];
            var _loop_2 = function (propertyName) {
                if (expectedPropertyNames.includes(propertyName)) {
                    return "continue";
                }
                if (expectedPatterns.some(function (regexp) { return regexp.test(propertyName); })) {
                    return "continue";
                }
                if (failFast) {
                    return { value: {
                            valid: false,
                            schemaLocation: schemaLocation,
                            schemaKeyword: 'additionalProperties',
                            instanceLocation: instanceLocation,
                            message: "has a disallowed additional property ('".concat(propertyName, "')")
                        } };
                }
                invalidPropertyNames.push(propertyName);
            };
            try {
                for (var _b = __values(Object.keys(instance)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var propertyName = _c.value;
                    var state_2 = _loop_2(propertyName);
                    if (typeof state_2 === "object")
                        return state_2.value;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (invalidPropertyNames.length === 0) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'additionalProperties',
                    instanceLocation: instanceLocation
                };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'additionalProperties',
                    instanceLocation: instanceLocation,
                    message: formatMessage(null, invalidPropertyNames)
                };
            }
        };
    }
}
exports.validatorForNoAdditionalProperties = validatorForNoAdditionalProperties;
function additionalPropertiesValidator(schema, schemaPath, context) {
    var _a, _b;
    if (!('additionalProperties' in schema)) {
        return null;
    }
    var additionalProperties = schema['additionalProperties'];
    if (additionalProperties === false) {
        return validatorForNoAdditionalProperties(schema, schemaPath, context);
    }
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    var validator = context.validatorForSchema(additionalProperties, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/additionalProperties'], false));
    var properties = (_a = schema['properties']) !== null && _a !== void 0 ? _a : {};
    var expectedPropertyNames = Object.keys(properties);
    var patternProperties = (_b = schema['patternProperties']) !== null && _b !== void 0 ? _b : {};
    var expectedPatterns = Object.keys(patternProperties).map(function (pattern) { return new RegExp(pattern); });
    if (outputFormat === 'flag') {
        return function (instance, instanceLocation, annotationResults) {
            var e_3, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var validOutputs = new Map();
            var _loop_3 = function (propertyName, propertyValue) {
                if (expectedPropertyNames.includes(propertyName)) {
                    return "continue";
                }
                if (expectedPatterns.some(function (regexp) { return regexp.test(propertyName); })) {
                    return "continue";
                }
                var output = validator(propertyValue, "".concat(instanceLocation, "/").concat((0, json_pointer_1.escapeReferenceToken)(propertyName)));
                if (output.valid) {
                    validOutputs.set(propertyName, output);
                }
                else {
                    return { value: { valid: false } };
                }
            };
            try {
                for (var _b = __values(Object.entries(instance)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), propertyName = _d[0], propertyValue = _d[1];
                    var state_3 = _loop_3(propertyName, propertyValue);
                    if (typeof state_3 === "object")
                        return state_3.value;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (validOutputs.size > 0) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'additionalProperties',
                    instanceLocation: instanceLocation,
                    annotationResults: {
                        additionalProperties: Array.from(validOutputs.keys())
                    }
                };
            }
            else {
                return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'additionalProperties', instanceLocation: instanceLocation };
            }
        };
    }
    else {
        return function (instance, instanceLocation, annotationResults) {
            var e_4, _a;
            if (!(0, isJSONObject_1.isJSONObject)(instance)) {
                return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
            }
            var validOutputs = new Map();
            var invalidPropertyNames = [];
            var errors = [];
            var _loop_4 = function (propertyName, propertyValue) {
                if (expectedPropertyNames.includes(propertyName)) {
                    return "continue";
                }
                if (expectedPatterns.some(function (regexp) { return regexp.test(propertyName); })) {
                    return "continue";
                }
                var output = validator(propertyValue, "".concat(instanceLocation, "/").concat((0, json_pointer_1.escapeReferenceToken)(propertyName)));
                if (output.valid) {
                    validOutputs.set(propertyName, output);
                }
                else {
                    if (failFast) {
                        return { value: {
                                valid: false,
                                schemaLocation: schemaLocation,
                                schemaKeyword: 'additionalProperties',
                                instanceLocation: instanceLocation,
                                message: formatMessage([output], [propertyName]),
                                errors: [output]
                            } };
                    }
                    invalidPropertyNames.push(propertyName);
                    errors.push(output);
                }
            };
            try {
                for (var _b = __values(Object.entries(instance)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), propertyName = _d[0], propertyValue = _d[1];
                    var state_4 = _loop_4(propertyName, propertyValue);
                    if (typeof state_4 === "object")
                        return state_4.value;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            if (errors.length === 0) {
                if (validOutputs.size > 0) {
                    return {
                        valid: true,
                        schemaLocation: schemaLocation,
                        schemaKeyword: 'additionalProperties',
                        instanceLocation: instanceLocation,
                        annotationResults: {
                            additionalProperties: Array.from(validOutputs.keys())
                        }
                    };
                }
                else {
                    return {
                        valid: true,
                        schemaLocation: schemaLocation,
                        schemaKeyword: 'additionalProperties',
                        instanceLocation: instanceLocation
                    };
                }
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'additionalProperties',
                    instanceLocation: instanceLocation,
                    message: formatMessage(errors, invalidPropertyNames),
                    errors: errors
                };
            }
        };
    }
}
exports.additionalPropertiesValidator = additionalPropertiesValidator;
function formatMessage(errors, invalidPropertyNames) {
    var message;
    if (invalidPropertyNames.length === 1) {
        message = "has an invalid property ".concat(invalidPropertyNames[0]);
    }
    else {
        message = "has invalid properties ".concat((0, formatList_1.formatList)(invalidPropertyNames.map(function (propertyName) { return "'".concat(propertyName, "'"); }), 'and'));
    }
    if (errors !== null) {
        message += " (".concat(errors.map(function (error) { return error.message; }).join('; '), ")");
    }
    return message;
}
exports.formatMessage = formatMessage;
