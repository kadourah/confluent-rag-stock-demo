import type { GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { EnumOptions, EnumValueOptions, FieldOptions, FileOptions, MessageOptions } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file confluent/meta.proto.
 */
export declare const file_confluent_meta: GenFile;
/**
 * @generated from message confluent.Meta
 */
export type Meta = Message<"confluent.Meta"> & {
    /**
     * @generated from field: string doc = 1;
     */
    doc: string;
    /**
     * @generated from field: map<string, string> params = 2;
     */
    params: {
        [key: string]: string;
    };
    /**
     * @generated from field: repeated string tags = 3;
     */
    tags: string[];
};
/**
 * Describes the message confluent.Meta.
 * Use `create(MetaSchema)` to create a new message.
 */
export declare const MetaSchema: GenMessage<Meta>;
/**
 * @generated from extension: confluent.Meta file_meta = 1088;
 */
export declare const file_meta: GenExtension<FileOptions, Meta>;
/**
 * @generated from extension: confluent.Meta message_meta = 1088;
 */
export declare const message_meta: GenExtension<MessageOptions, Meta>;
/**
 * @generated from extension: confluent.Meta field_meta = 1088;
 */
export declare const field_meta: GenExtension<FieldOptions, Meta>;
/**
 * @generated from extension: confluent.Meta enum_meta = 1088;
 */
export declare const enum_meta: GenExtension<EnumOptions, Meta>;
/**
 * @generated from extension: confluent.Meta enum_value_meta = 1088;
 */
export declare const enum_value_meta: GenExtension<EnumValueOptions, Meta>;
