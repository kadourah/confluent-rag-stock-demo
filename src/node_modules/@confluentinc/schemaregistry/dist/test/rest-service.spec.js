"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
const rest_service_1 = require("../rest-service");
const retryHelper = __importStar(require("@confluentinc/schemaregistry/retry-helper"));
const test_constants_1 = require("./test-constants");
(0, globals_1.describe)('RestService Retry Policy', () => {
    let restService;
    let mock;
    (0, globals_1.beforeEach)(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
        restService = new rest_service_1.RestService(['http://localhost'], false, {}, undefined, undefined, test_constants_1.maxRetries, test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs);
    });
    (0, globals_1.afterEach)(() => {
        mock.reset();
    });
    (0, globals_1.it)('should retry on retryable errors and eventually succeed', async () => {
        const url = '/test';
        const responseData = { message: 'Success' };
        mock.onGet(url).replyOnce(429).onGet(url).replyOnce(502).onGet(url).reply(200, responseData);
        const response = await restService.handleRequest(url, 'GET');
        (0, globals_1.expect)(response.status).toBe(200);
        (0, globals_1.expect)(response.data).toEqual(responseData);
        (0, globals_1.expect)(mock.history.get.length).toBe(3);
    });
    (0, globals_1.it)('should throw an error after exhausting retries', async () => {
        const url = '/test';
        mock.onGet(url).reply(429);
        await (0, globals_1.expect)(restService.handleRequest(url, 'GET')).rejects.toThrowError();
        (0, globals_1.expect)(mock.history.get.length).toBe(test_constants_1.maxRetries + 1);
    });
    (0, globals_1.it)('should not retry on non-retryable errors (e.g., 401)', async () => {
        const url = '/test';
        mock.onGet(url).reply(401);
        await (0, globals_1.expect)(restService.handleRequest(url, 'GET')).rejects.toThrowError();
        (0, globals_1.expect)(mock.history.get.length).toBe(1);
    });
    (0, globals_1.it)('should apply exponential backoff with jitter and retry only on retriable errors', async () => {
        const url = '/test';
        globals_1.jest.spyOn(retryHelper, 'isRetriable');
        globals_1.jest.spyOn(retryHelper, 'fullJitter');
        mock.onGet(url).reply(500);
        await (0, globals_1.expect)(restService.handleRequest(url, 'GET')).rejects.toThrowError();
        (0, globals_1.expect)(mock.history.get.length).toBe(test_constants_1.maxRetries + 1);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 0);
        (0, globals_1.expect)(retryHelper.fullJitter).toHaveBeenCalledWith(test_constants_1.retriesWaitMs, test_constants_1.retriesMaxWaitMs, 1);
        (0, globals_1.expect)(retryHelper.isRetriable).toHaveBeenCalledTimes(test_constants_1.maxRetries);
        (0, globals_1.expect)(retryHelper.isRetriable).toHaveBeenCalledWith(500);
    });
});
