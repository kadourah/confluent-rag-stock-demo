"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.typeValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONArray_1 = require("../../../../util/isJSONArray");
var isJSONNumber_1 = require("../../../../util/isJSONNumber");
var isJSONObject_1 = require("../../../../util/isJSONObject");
var isJSONString_1 = require("../../../../util/isJSONString");
var formattedType = function (primitiveType) {
    switch (primitiveType) {
        case 'array':
            return 'an array';
        case 'boolean':
            return 'a boolean';
        case 'integer':
            return 'an integer';
        case 'null':
            return 'null';
        case 'number':
            return 'a number';
        case 'object':
            return 'an object';
        case 'string':
            return 'a string';
    }
};
var formattedTypeOf = function (instance) {
    if (instance === null) {
        return 'null';
    }
    if (typeof instance === 'object') {
        if (Array.isArray(instance)) {
            return 'an array';
        }
        else {
            return 'an object';
        }
    }
    if (typeof instance === 'number') {
        if (Number.isInteger(instance)) {
            return 'an integer';
        }
        else {
            return 'a number';
        }
    }
    return "a ".concat(typeof instance);
};
var jsonTypePredicate = function (primitiveType) {
    switch (primitiveType) {
        case 'array':
            return isJSONArray_1.isJSONArray;
        case 'boolean':
            return function (instance) { return typeof instance === 'boolean'; };
        case 'integer':
            return function (instance) { return Number.isInteger(instance); };
        case 'null':
            return function (instance) { return instance === null; };
        case 'number':
            return isJSONNumber_1.isJSONNumber;
        case 'object':
            return isJSONObject_1.isJSONObject;
        case 'string':
            return isJSONString_1.isJSONString;
    }
};
function typeValidator(schema, schemaPath, context) {
    if (!('type' in schema)) {
        return null;
    }
    var type = schema['type'];
    if (Array.isArray(type)) {
        var predicates_1 = type.map(function (candidate) { return jsonTypePredicate(candidate); });
        var expectations_1 = (0, formatList_1.formatList)(type.map(formattedType), 'or');
        var schemaLocation_1 = schemaPath.join('');
        return function (instance, instanceLocation, annotationResults) {
            var e_1, _a;
            try {
                for (var predicates_2 = __values(predicates_1), predicates_2_1 = predicates_2.next(); !predicates_2_1.done; predicates_2_1 = predicates_2.next()) {
                    var predicate = predicates_2_1.value;
                    if (predicate(instance)) {
                        return { valid: true, schemaLocation: schemaLocation_1, instanceLocation: instanceLocation };
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (predicates_2_1 && !predicates_2_1.done && (_a = predicates_2["return"])) _a.call(predicates_2);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return {
                valid: false,
                schemaLocation: schemaLocation_1,
                schemaKeyword: 'type',
                instanceLocation: instanceLocation,
                message: "should be either ".concat(expectations_1, " but is ").concat(formattedTypeOf(instance), " instead")
            };
        };
    }
    else {
        var predicate_1 = jsonTypePredicate(type);
        var expectation_1 = formattedType(type);
        var outputFormat_1 = context.outputFormat;
        var schemaLocation_2 = schemaPath.join('');
        return function (instance, instanceLocation, annotationResults) {
            if (predicate_1(instance)) {
                return {
                    valid: true,
                    schemaLocation: schemaLocation_2,
                    schemaKeyword: 'type',
                    instanceLocation: instanceLocation
                };
            }
            else {
                if (outputFormat_1 === 'flag') {
                    return { valid: false };
                }
                else {
                    return {
                        valid: false,
                        schemaLocation: schemaLocation_2,
                        schemaKeyword: 'type',
                        instanceLocation: instanceLocation,
                        message: "should be ".concat(expectation_1, " but is ").concat(formattedTypeOf(instance), " instead")
                    };
                }
            }
        };
    }
}
exports.typeValidator = typeValidator;
