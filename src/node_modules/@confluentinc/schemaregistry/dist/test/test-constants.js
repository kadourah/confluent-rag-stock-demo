"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retriesMaxWaitMs = exports.retriesWaitMs = exports.maxRetries = exports.mockTtlClientConfig = exports.mockClientConfig = exports.clientConfig = void 0;
const baseUrls = ['http://localhost:8081'];
const mockBaseUrls = ['http://mocked-url'];
const createAxiosDefaults = {
    timeout: 10000
};
const basicAuthCredentials = {
    credentialsSource: 'USER_INFO',
    userInfo: 'RBACAllowedUser-lsrc1:nohash',
};
const clientConfig = {
    baseURLs: baseUrls,
    createAxiosDefaults: createAxiosDefaults,
    isForward: false,
    cacheCapacity: 512,
    cacheLatestTtlSecs: 60,
    basicAuthCredentials: basicAuthCredentials,
};
exports.clientConfig = clientConfig;
const mockClientConfig = {
    baseURLs: mockBaseUrls,
    createAxiosDefaults: createAxiosDefaults,
    isForward: false,
    cacheCapacity: 512,
    cacheLatestTtlSecs: 60,
    basicAuthCredentials: basicAuthCredentials
};
exports.mockClientConfig = mockClientConfig;
const mockTtlClientConfig = {
    baseURLs: mockBaseUrls,
    createAxiosDefaults: createAxiosDefaults,
    isForward: false,
    cacheCapacity: 512,
    cacheLatestTtlSecs: 1,
    basicAuthCredentials: basicAuthCredentials
};
exports.mockTtlClientConfig = mockTtlClientConfig;
const maxRetries = 2;
exports.maxRetries = maxRetries;
const retriesWaitMs = 100;
exports.retriesWaitMs = retriesWaitMs;
const retriesMaxWaitMs = 1000;
exports.retriesMaxWaitMs = retriesMaxWaitMs;
