"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
exports.__esModule = true;
exports.decodeURIFragment = exports.encodeURIFragment = exports.normalizeURI = exports.splitFragment = exports.hasFragment = exports.isSameDocumentReference = exports.isAbsoluteURI = exports.resolveURIReference = void 0;
var toad_uri_js_1 = require("toad-uri-js");
function resolveURIReference(uriReference, baseURI) {
    return (0, toad_uri_js_1.resolve)(baseURI, uriReference);
}
exports.resolveURIReference = resolveURIReference;
function isAbsoluteURI(uri) {
    var components = (0, toad_uri_js_1.parse)(uri);
    return components.scheme !== undefined && components.fragment === undefined;
}
exports.isAbsoluteURI = isAbsoluteURI;
function isSameDocumentReference(uri) {
    var _a = (0, toad_uri_js_1.parse)(uri), fragment = _a.fragment, reference = _a.reference;
    return reference === 'same-document' && fragment !== undefined;
}
exports.isSameDocumentReference = isSameDocumentReference;
function hasFragment(uri) {
    var fragment = (0, toad_uri_js_1.parse)(uri).fragment;
    return fragment !== undefined;
}
exports.hasFragment = hasFragment;
function splitFragment(uri) {
    var _a = (0, toad_uri_js_1.parse)(uri), fragment = _a.fragment, restComponents = __rest(_a, ["fragment"]);
    return {
        absoluteURI: (0, toad_uri_js_1.normalize)((0, toad_uri_js_1.serialize)(restComponents)),
        fragment: decodeURIComponent(fragment)
    };
}
exports.splitFragment = splitFragment;
function normalizeURI(uri) {
    return (0, toad_uri_js_1.normalize)(uri);
}
exports.normalizeURI = normalizeURI;
function encodeURIFragment(fragment) {
    return encodeURI(fragment).replaceAll('#', '%23');
}
exports.encodeURIFragment = encodeURIFragment;
function decodeURIFragment(fragment) {
    return decodeURI(fragment.replaceAll('%23', '#'));
}
exports.decodeURIFragment = decodeURIFragment;
