"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.DocumentIndex = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
var retrievers_1 = require("../retrievers");
var promises_1 = require("../util/promises");
var uri_1 = require("../util/uri");
var visitJSONReferences_1 = require("../util/visitJSONReferences");
// default configuration
var defaultCloned = false;
var defaultRetrieve = function (uri) {
    throw new Error("Cannot retrieve URI '".concat(uri, "'"));
};
var DocumentIndex = /** @class */ (function () {
    function DocumentIndex(configuration) {
        var _a;
        this.documentsByURI = new Map();
        this.infosByDocument = new Map();
        this.cloned = (_a = configuration.cloned) !== null && _a !== void 0 ? _a : defaultCloned;
        this.retrieve = (0, retrievers_1.memoize)(function (uri) {
            var _a, _b;
            var documentOrPromise = (_b = (_a = (0, retrievers_1.retrieveBuiltin)(uri)) !== null && _a !== void 0 ? _a : configuration === null || configuration === void 0 ? void 0 : configuration.retrieve(uri)) !== null && _b !== void 0 ? _b : defaultRetrieve(uri);
            return (0, promises_1.chain)(documentOrPromise, function (document) {
                if (!document) {
                    throw new Error("Invalid document retrieved at uri '".concat(uri, "'"));
                }
                return document;
            });
        });
    }
    DocumentIndex.prototype.root = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.documentsByURI.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var document = _c.value;
                return document;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    DocumentIndex.prototype.isObjectIndexed = function (object) {
        return this.infosByDocument.has(object);
    };
    DocumentIndex.prototype.isURIIndexed = function (uri) {
        return this.documentsByURI.has(uri);
    };
    DocumentIndex.prototype.indexedObjectWithURI = function (uri) {
        return this.documentsByURI.get(uri);
    };
    DocumentIndex.prototype.infoForIndexedObject = function (value) {
        if (this.infosByDocument.has(value)) {
            return this.infosByDocument.get(value);
        }
        return undefined;
    };
    DocumentIndex.prototype.find = function (uri, options) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var followReferences = (_a = options === null || options === void 0 ? void 0 : options.followReferences) !== null && _a !== void 0 ? _a : false;
        var _uris = (_b = options === null || options === void 0 ? void 0 : options._uris) !== null && _b !== void 0 ? _b : new Set();
        var followReference = function (value, baseURI) {
            if ((0, visitJSONReferences_1.isJSONReference)(value) && Object.keys(value).length === 1) {
                if (typeof value.$ref === 'string') {
                    var followedURI = (0, uri_1.resolveURIReference)(value.$ref, baseURI);
                    if (_uris.has(followedURI)) {
                        return {};
                    }
                    return _this.find(followedURI, __assign(__assign({}, options), { _uris: _uris }));
                }
                else {
                    return value.$ref;
                }
            }
            return value;
        };
        _uris.add(uri);
        var value = this.indexedObjectWithURI(uri);
        if (value !== undefined) {
            var baseURI = (_c = this.infoForIndexedObject(value)) === null || _c === void 0 ? void 0 : _c.baseURI;
            return followReferences && typeof value === 'object' ? followReference(value, baseURI) : value;
        }
        var _k = (0, uri_1.splitFragment)(uri), absoluteURI = _k.absoluteURI, fragment = _k.fragment;
        if (absoluteURI !== uri && (0, json_pointer_1.isJSONPointer)(fragment)) {
            var container = this.find(absoluteURI, options); // can followReferences be folded into findIndex?
            var evaluatedValue = (0, json_pointer_1.evaluateJSONPointer)(fragment, container);
            if (evaluatedValue !== undefined) {
                var baseURI = (_d = this.infoForIndexedObject(container)) === null || _d === void 0 ? void 0 : _d.baseURI;
                return followReferences ? followReference(evaluatedValue, baseURI) : evaluatedValue;
            }
            if (followReferences) {
                if (fragment === '') {
                    return container;
                }
                var i = uri.lastIndexOf('/');
                var parentURI = uri.slice(0, i);
                var remainingFragment = uri.slice(i);
                var parent = this.find(parentURI, options);
                var evaluatedValue_1 = (0, json_pointer_1.evaluateJSONPointer)(remainingFragment, parent); // try evaluating against siblings of $ref
                if (evaluatedValue_1 !== undefined) {
                    var baseURI = (_e = this.infoForIndexedObject(parent)) === null || _e === void 0 ? void 0 : _e.baseURI;
                    return followReferences === true ? followReference(evaluatedValue_1, baseURI) : evaluatedValue_1;
                }
                if (typeof parent === 'object' && '$ref' in parent) {
                    if (typeof parent.$ref == 'object') {
                        parent = parent.$ref;
                    }
                    else {
                        var baseURI = (_g = (_f = this.infoForIndexedObject(parent)) === null || _f === void 0 ? void 0 : _f.baseURI) !== null && _g !== void 0 ? _g : (_h = this.infoForIndexedObject(container)) === null || _h === void 0 ? void 0 : _h.baseURI;
                        var parentRefURI = (0, uri_1.resolveURIReference)(parent.$ref, baseURI);
                        parent = this.find(parentRefURI, options);
                    }
                    var evaluatedValue_2 = (0, json_pointer_1.evaluateJSONPointer)(remainingFragment, parent);
                    if (evaluatedValue_2 !== undefined) {
                        var baseURI = (_j = this.infoForIndexedObject(parent)) === null || _j === void 0 ? void 0 : _j.baseURI;
                        return (options === null || options === void 0 ? void 0 : options.followReferences) === true ? followReference(evaluatedValue_2, baseURI) : evaluatedValue_2;
                    }
                }
            }
        }
        return undefined;
    };
    DocumentIndex.prototype.addDocument = function (document, baseURI) {
        // TODO: assert baseURI is absolute..
        if (this.cloned) {
            document = structuredClone(document);
        }
        var _a = (0, uri_1.splitFragment)(baseURI), absoluteURI = _a.absoluteURI, fragment = _a.fragment;
        this.documentsByURI.set(absoluteURI, document);
        if (typeof document === 'object') {
            this.infosByDocument.set(document, {
                baseURI: absoluteURI
            });
        }
        return document;
    };
    DocumentIndex.prototype.addDocumentWithURI = function (uri) {
        var _this = this;
        if ((0, uri_1.hasFragment)(uri)) {
            throw new Error("Document URI is not absolute: ".concat(uri));
        }
        if (this.isURIIndexed(uri)) {
            return;
        }
        var documentOrPromise;
        try {
            documentOrPromise = this.retrieve(uri);
        }
        catch (error) {
            throw new Error("Failed to retrieve document at uri '".concat(uri, "'"));
        }
        return (0, promises_1.chain)(documentOrPromise, function (document) {
            return _this.addDocument(document, uri);
        }, function (error) {
            throw new Error("Failed to retrieve document at uri '".concat(uri, "'"));
        });
    };
    return DocumentIndex;
}());
exports.DocumentIndex = DocumentIndex;
