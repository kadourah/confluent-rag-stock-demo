import schemaJSON from './schema.json';
export default schemaJSON;
export declare const schemasByID: {
    [k: string]: {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/applicator": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            prefixItems: {
                $ref: string;
            };
            items: {
                $dynamicRef: string;
            };
            contains: {
                $dynamicRef: string;
            };
            additionalProperties: {
                $dynamicRef: string;
            };
            properties: {
                type: string;
                additionalProperties: {
                    $dynamicRef: string;
                };
                default: {};
            };
            patternProperties: {
                type: string;
                additionalProperties: {
                    $dynamicRef: string;
                };
                propertyNames: {
                    format: string;
                };
                default: {};
            };
            dependentSchemas: {
                type: string;
                additionalProperties: {
                    $dynamicRef: string;
                };
                default: {};
            };
            propertyNames: {
                $dynamicRef: string;
            };
            if: {
                $dynamicRef: string;
            };
            then: {
                $dynamicRef: string;
            };
            else: {
                $dynamicRef: string;
            };
            allOf: {
                $ref: string;
            };
            anyOf: {
                $ref: string;
            };
            oneOf: {
                $ref: string;
            };
            not: {
                $dynamicRef: string;
            };
        };
        $defs: {
            schemaArray: {
                type: string;
                minItems: number;
                items: {
                    $dynamicRef: string;
                };
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/content": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            contentEncoding: {
                type: string;
            };
            contentMediaType: {
                type: string;
            };
            contentSchema: {
                $dynamicRef: string;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/core": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            $id: {
                $ref: string;
                $comment: string;
                pattern: string;
            };
            $schema: {
                $ref: string;
            };
            $ref: {
                $ref: string;
            };
            $anchor: {
                $ref: string;
            };
            $dynamicRef: {
                $ref: string;
            };
            $dynamicAnchor: {
                $ref: string;
            };
            $vocabulary: {
                type: string;
                propertyNames: {
                    $ref: string;
                };
                additionalProperties: {
                    type: string;
                };
            };
            $comment: {
                type: string;
            };
            $defs: {
                type: string;
                additionalProperties: {
                    $dynamicRef: string;
                };
            };
        };
        $defs: {
            anchorString: {
                type: string;
                pattern: string;
            };
            uriString: {
                type: string;
                format: string;
            };
            uriReferenceString: {
                type: string;
                format: string;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/format-annotation": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            format: {
                type: string;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/format-assertion": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            format: {
                type: string;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/meta-data": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            title: {
                type: string;
            };
            description: {
                type: string;
            };
            default: boolean;
            deprecated: {
                type: string;
                default: boolean;
            };
            readOnly: {
                type: string;
                default: boolean;
            };
            writeOnly: {
                type: string;
                default: boolean;
            };
            examples: {
                type: string;
                items: boolean;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/unevaluated": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            unevaluatedItems: {
                $dynamicRef: string;
            };
            unevaluatedProperties: {
                $dynamicRef: string;
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/validation": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        type: string[];
        properties: {
            type: {
                anyOf: ({
                    $ref: string;
                    type?: undefined;
                    items?: undefined;
                    minItems?: undefined;
                    uniqueItems?: undefined;
                } | {
                    type: string;
                    items: {
                        $ref: string;
                    };
                    minItems: number;
                    uniqueItems: boolean;
                    $ref?: undefined;
                })[];
            };
            const: boolean;
            enum: {
                type: string;
                items: boolean;
            };
            multipleOf: {
                type: string;
                exclusiveMinimum: number;
            };
            maximum: {
                type: string;
            };
            exclusiveMaximum: {
                type: string;
            };
            minimum: {
                type: string;
            };
            exclusiveMinimum: {
                type: string;
            };
            maxLength: {
                $ref: string;
            };
            minLength: {
                $ref: string;
            };
            pattern: {
                type: string;
                format: string;
            };
            maxItems: {
                $ref: string;
            };
            minItems: {
                $ref: string;
            };
            uniqueItems: {
                type: string;
                default: boolean;
            };
            maxContains: {
                $ref: string;
            };
            minContains: {
                $ref: string;
                default: number;
            };
            maxProperties: {
                $ref: string;
            };
            minProperties: {
                $ref: string;
            };
            required: {
                $ref: string;
            };
            dependentRequired: {
                type: string;
                additionalProperties: {
                    $ref: string;
                };
            };
        };
        $defs: {
            nonNegativeInteger: {
                type: string;
                minimum: number;
            };
            nonNegativeIntegerDefault0: {
                $ref: string;
                default: number;
            };
            simpleTypes: {
                enum: string[];
            };
            stringArray: {
                type: string;
                items: {
                    type: string;
                };
                uniqueItems: boolean;
                default: any[];
            };
        };
    } | {
        $schema: string;
        $id: string;
        $vocabulary: {
            "https://json-schema.org/draft/2020-12/vocab/core": boolean;
            "https://json-schema.org/draft/2020-12/vocab/applicator": boolean;
            "https://json-schema.org/draft/2020-12/vocab/unevaluated": boolean;
            "https://json-schema.org/draft/2020-12/vocab/validation": boolean;
            "https://json-schema.org/draft/2020-12/vocab/meta-data": boolean;
            "https://json-schema.org/draft/2020-12/vocab/format-annotation": boolean;
            "https://json-schema.org/draft/2020-12/vocab/content": boolean;
        };
        $dynamicAnchor: string;
        title: string;
        allOf: {
            $ref: string;
        }[];
        type: string[];
        $comment: string;
        properties: {
            definitions: {
                $comment: string;
                type: string;
                additionalProperties: {
                    $dynamicRef: string;
                };
                deprecated: boolean;
                default: {};
            };
            dependencies: {
                $comment: string;
                type: string;
                additionalProperties: {
                    anyOf: ({
                        $dynamicRef: string;
                        $ref?: undefined;
                    } | {
                        $ref: string;
                        $dynamicRef?: undefined;
                    })[];
                };
                deprecated: boolean;
                default: {};
            };
            $recursiveAnchor: {
                $comment: string;
                $ref: string;
                deprecated: boolean;
            };
            $recursiveRef: {
                $comment: string;
                $ref: string;
                deprecated: boolean;
            };
        };
    };
};
