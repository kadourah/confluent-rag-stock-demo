"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.requiredValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
function requiredValidator(schema, schemaPath, context) {
    if (!('required' in schema)) {
        return null;
    }
    var required = schema['required'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var e_1, _a;
        if (!(0, isJSONObject_1.isJSONObject)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var missingProperties = [];
        try {
            for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {
                var property = required_1_1.value;
                if (!instance.hasOwnProperty(property)) {
                    missingProperties.push(property);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (required_1_1 && !required_1_1.done && (_a = required_1["return"])) _a.call(required_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (missingProperties.length === 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'required',
                instanceLocation: instanceLocation
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'required',
                    instanceLocation: instanceLocation,
                    message: "is missing ".concat((0, formatList_1.formatList)(missingProperties.map(function (name) { return "'".concat(name, "'"); }), 'and'))
                };
            }
        }
    };
}
exports.requiredValidator = requiredValidator;
