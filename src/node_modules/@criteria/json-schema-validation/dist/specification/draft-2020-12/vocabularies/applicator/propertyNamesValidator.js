"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.formatMessage = exports.propertyNamesValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONObject_1 = require("../../../../util/isJSONObject");
function propertyNamesValidator(schema, schemaPath, context) {
    if (!('propertyNames' in schema)) {
        return null;
    }
    var propertyNames = schema['propertyNames'];
    var validator = context.validatorForSchema(propertyNames, __spreadArray(__spreadArray([], __read(schemaPath), false), ["/propertyNames"], false));
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var e_1, _a;
        if (!(0, isJSONObject_1.isJSONObject)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var validOutputs = new Map();
        var invalidPropertyNames = [];
        var errors = [];
        try {
            for (var _b = __values(Object.keys(instance)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var propertyName = _c.value;
                // property names don't have a path from the root
                var output = validator(propertyName, '');
                if (!output.valid && failFast) {
                    if (outputFormat === 'flag') {
                        return { valid: false };
                    }
                    else {
                        return {
                            valid: false,
                            schemaLocation: schemaLocation,
                            schemaKeyword: 'propertyNames',
                            instanceLocation: instanceLocation,
                            message: formatMessage([output], [propertyName]),
                            errors: [output]
                        };
                    }
                }
                if (output.valid) {
                    validOutputs.set(propertyName, output);
                }
                else {
                    invalidPropertyNames.push(propertyName);
                    errors.push(output);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (errors.length === 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'propertyNames',
                instanceLocation: instanceLocation
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'propertyNames',
                    instanceLocation: instanceLocation,
                    message: formatMessage(errors, invalidPropertyNames),
                    errors: errors
                };
            }
        }
    };
}
exports.propertyNamesValidator = propertyNamesValidator;
function formatMessage(errors, invalidPropertyNames) {
    var message;
    if (invalidPropertyNames.length === 1) {
        message = "has an invalid property name ".concat(invalidPropertyNames[0]);
    }
    else {
        message = "has invalid property names ".concat((0, formatList_1.formatList)(invalidPropertyNames.map(function (propertyName) { return "'".concat(propertyName, "'"); }), 'and'));
    }
    if (errors !== null) {
        message += " (".concat(errors.map(function (error) { return error.message; }).join('; '), ")");
    }
    return message;
}
exports.formatMessage = formatMessage;
