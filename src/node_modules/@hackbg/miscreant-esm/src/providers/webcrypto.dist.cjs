"use strict";
var __awaiter = this && this.__awaiter || (function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebCryptoProvider = void 0;
const exceptions_1 = require("../exceptions.dist.cjs");
const aes_1 = require("./webcrypto/aes.dist.cjs");
const aes_ctr_1 = require("./webcrypto/aes_ctr.dist.cjs");
class WebCryptoProvider {
  constructor(crypto = window.crypto) {
    this.crypto = crypto;
  }
  importBlockCipherKey(keyData) {
    return __awaiter(this, void 0, void 0, function* () {
      return aes_1.default.importKey(this.crypto, keyData);
    });
  }
  importCTRKey(keyData) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        return yield aes_ctr_1.default.importKey(this.crypto, keyData);
      } catch (e) {
        if (e.message.includes("unsupported")) {
          throw new exceptions_1.NotImplementedError("WebCryptoProvider: AES-CTR unsupported. Use SoftCryptoProvider.");
        } else {
          throw e;
        }
      }
    });
  }
}
exports.WebCryptoProvider = WebCryptoProvider;
