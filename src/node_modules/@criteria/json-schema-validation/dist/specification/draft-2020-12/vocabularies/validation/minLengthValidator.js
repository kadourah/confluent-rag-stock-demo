"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.minLengthValidator = void 0;
var isJSONString_1 = require("../../../../util/isJSONString");
function minLengthValidator(schema, schemaPath, context) {
    if (!('minLength' in schema)) {
        return null;
    }
    var minLength = schema['minLength'];
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONString_1.isJSONString)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        // count unicode characters, not UTF-16 code points
        var charactersCount = __spreadArray([], __read(instance), false).length;
        if (charactersCount >= minLength) {
            return { valid: true, schemaLocation: schemaLocation, schemaKeyword: 'minLength', instanceLocation: instanceLocation };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'minLength',
                    instanceLocation: instanceLocation,
                    message: minLength === 1
                        ? "should have at least 1 character but has ".concat(charactersCount, " instead")
                        : "should have at least ".concat(minLength, " characters but has ").concat(charactersCount, " instead")
                };
            }
        }
    };
}
exports.minLengthValidator = minLengthValidator;
