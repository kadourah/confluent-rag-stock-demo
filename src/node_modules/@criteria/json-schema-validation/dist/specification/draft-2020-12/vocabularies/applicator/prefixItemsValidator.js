"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.prefixItemsValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var isJSONArray_1 = require("../../../../util/isJSONArray");
function prefixItemsValidator(schema, schemaPath, context) {
    if (!('prefixItems' in schema)) {
        return null;
    }
    var prefixItems = schema['prefixItems'];
    var prefixItemValidators = prefixItems.map(function (subschema, i) {
        return context.validatorForSchema(subschema, __spreadArray(__spreadArray([], __read(schemaPath), false), ["/prefixItems/".concat(i)], false));
    });
    var outputFormat = context.outputFormat;
    var failFast = context.failFast;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        if (!(0, isJSONArray_1.isJSONArray)(instance)) {
            return { valid: true, schemaLocation: schemaLocation, instanceLocation: instanceLocation };
        }
        var validOutputs = [];
        var errors = [];
        var invalidIndices = [];
        for (var i = 0; i < instance.length && i < prefixItemValidators.length; i++) {
            var validator = prefixItemValidators[i];
            var output = validator(instance[i], "".concat(instanceLocation, "/").concat(i));
            if (output.valid) {
                validOutputs.push(output);
            }
            else {
                if (failFast) {
                    return output;
                }
                errors.push(output);
                invalidIndices.push(i);
            }
        }
        if (errors.length === 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'prefixItems',
                instanceLocation: instanceLocation,
                annotationResults: {
                    prefixItems: validOutputs.length < instance.length ? validOutputs.length - 1 : true
                }
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'prefixItems',
                    instanceLocation: instanceLocation,
                    message: formatMessage(errors, invalidIndices),
                    errors: errors
                };
            }
        }
    };
}
exports.prefixItemsValidator = prefixItemsValidator;
function formatMessage(errors, invalidIndices) {
    var message;
    if (invalidIndices.length === 1) {
        message = "has an invalid item at position ".concat(invalidIndices[0]);
    }
    else {
        message = "has invalid items at positions ".concat((0, formatList_1.formatList)(invalidIndices.map(function (invalidIndex) { return "".concat(invalidIndex); }), 'and'));
    }
    if (errors !== null) {
        message += " (".concat(errors.map(function (error) { return error.message; }).join('; '), ")");
    }
    return message;
}
exports.formatMessage = formatMessage;
