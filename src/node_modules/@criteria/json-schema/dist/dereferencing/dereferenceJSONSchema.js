"use strict";
exports.__esModule = true;
exports.dereferenceJSONSchema = exports.defaultReferenceMergePolicy = void 0;
var SchemaIndex_1 = require("../schema-index/SchemaIndex");
var promises_1 = require("../util/promises");
var dereferenceReferences_1 = require("./dereferenceReferences");
var mergeReference_1 = require("./mergeReference");
// default options
exports.defaultReferenceMergePolicy = 'by_keyword';
function dereferenceJSONSchema(rootSchema, options) {
    var _a;
    // Index root schema
    var index = new SchemaIndex_1.SchemaIndex({
        cloned: true,
        retrieve: options === null || options === void 0 ? void 0 : options.retrieve,
        defaultMetaSchemaID: options.defaultMetaSchemaID
    });
    var addRootSchemaResult = index.addRootSchema(rootSchema, (_a = options.baseURI) !== null && _a !== void 0 ? _a : '');
    return (0, promises_1.chain)(addRootSchemaResult, function () {
        var _a;
        rootSchema = index.root();
        var referenceMergePolicy = (_a = options === null || options === void 0 ? void 0 : options.referenceMergePolicy) !== null && _a !== void 0 ? _a : exports.defaultReferenceMergePolicy;
        (0, dereferenceReferences_1.dereferenceReferences)(rootSchema, index.references, index, function (reference, info, dereferencedValue) {
            return (0, mergeReference_1.mergeReference)(reference, info, dereferencedValue, referenceMergePolicy);
        });
        var root = index.root();
        if (typeof root === 'object' && '$ref' in root && Object.keys(root).length === 1) {
            return root.$ref;
        }
        return root;
    });
}
exports.dereferenceJSONSchema = dereferenceJSONSchema;
