"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.retrieveBuiltin = void 0;
var meta_schema_1 = require("../specification/draft-04/meta-schema");
var meta_schema_2 = require("../specification/draft-06/meta-schema");
var meta_schema_3 = require("../specification/draft-07/meta-schema");
var meta_schema_4 = require("../specification/draft-2020-12/meta-schema");
var uri_1 = require("../util/uri");
var retrieveUsingLookup_1 = require("./retrieveUsingLookup");
var schemasByID = __assign(__assign(__assign(__assign({}, meta_schema_1.schemasByID), meta_schema_2.schemasByID), meta_schema_3.schemasByID), meta_schema_4.schemasByID);
exports.retrieveBuiltin = (0, retrieveUsingLookup_1.retrieveUsingLookup)(Object.fromEntries(Object.entries(schemasByID).map(function (_a) {
    var _b = __read(_a, 2), id = _b[0], schema = _b[1];
    var absoluteURI = (0, uri_1.splitFragment)(id).absoluteURI;
    return [absoluteURI, schema];
})));
