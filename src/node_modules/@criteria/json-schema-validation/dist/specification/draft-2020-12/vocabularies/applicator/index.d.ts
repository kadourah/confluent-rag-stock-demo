import { additionalPropertiesValidator } from './additionalPropertiesValidator';
import { allOfValidator } from './allOfValidator';
import { anyOfValidator } from './anyOfValidator';
import { containsValidator } from './containsValidator';
import { dependentSchemasValidator } from './dependentSchemasValidator';
import { ifValidator } from './ifValidator';
import { itemsValidator } from './itemsValidator';
import { notValidator } from './notValidator';
import { oneOfValidator } from './oneOfValidator';
import { patternPropertiesValidator } from './patternPropertiesValidator';
import { prefixItemsValidator } from './prefixItemsValidator';
import { propertiesValidator } from './propertiesValidator';
import { propertyNamesValidator } from './propertyNamesValidator';
export declare const applicatorValidators: {
    allOf: typeof allOfValidator;
    anyOf: typeof anyOfValidator;
    oneOf: typeof oneOfValidator;
    if: typeof ifValidator;
    not: typeof notValidator;
    properties: typeof propertiesValidator;
    additionalProperties: typeof additionalPropertiesValidator;
    patternProperties: typeof patternPropertiesValidator;
    dependentSchemas: typeof dependentSchemasValidator;
    propertyNames: typeof propertyNamesValidator;
    items: typeof itemsValidator;
    prefixItems: typeof prefixItemsValidator;
    contains: typeof containsValidator;
};
