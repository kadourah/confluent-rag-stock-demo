"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.anyOfValidator = void 0;
var formatList_1 = require("../../../../util/formatList");
var reduceAnnotationResults_1 = require("../reduceAnnotationResults");
function anyOfValidator(schema, schemaPath, context) {
    if (!('anyOf' in schema)) {
        return null;
    }
    var anyOf = schema['anyOf'];
    var validators = anyOf.map(function (subschema, i) { return context.validatorForSchema(subschema, __spreadArray(__spreadArray([], __read(schemaPath), false), ["/anyOf/".concat(i)], false)); });
    var outputFormat = context.outputFormat;
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var outputs = validators.map(function (validator) { return validator(instance, instanceLocation); });
        var validOutputs = outputs.filter(function (output) { return output.valid; });
        if (validOutputs.length > 0) {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'anyOf',
                instanceLocation: instanceLocation,
                annotationResults: validOutputs
                    .map(function (output) { var _a; return (_a = output.annotationResults) !== null && _a !== void 0 ? _a : {}; })
                    .reduce(reduceAnnotationResults_1.reduceAnnotationResults, {})
            };
        }
        else {
            if (outputFormat === 'flag') {
                return { valid: false };
            }
            else {
                return {
                    valid: false,
                    schemaLocation: schemaLocation,
                    schemaKeyword: 'anyOf',
                    instanceLocation: instanceLocation,
                    message: formatMessage(outputs),
                    errors: outputs
                };
            }
        }
    };
}
exports.anyOfValidator = anyOfValidator;
function formatMessage(errors) {
    return (0, formatList_1.formatList)(errors.map(function (error) { return error.message; }), 'or');
}
exports.formatMessage = formatMessage;
