"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.isJSONValidAsync = exports.isJSONValid = exports.validateJSONAsync = exports.validateJSON = exports.jsonValidatorAsync = exports.jsonValidator = exports.defaultDefaultMetaSchemaID = exports.defaultAssertFormat = exports.defaultFailFast = exports.defaultOutputFormat = void 0;
var json_schema_1 = require("@criteria/json-schema");
var draft_2020_12_1 = require("../draft-2020-12");
var ValidationError_1 = require("../errors/ValidationError");
var promises_1 = require("../util/promises");
var booleanValidator_1 = require("./booleanValidator");
var keywordValidators_1 = require("./keywordValidators");
var normalizedMetaSchemaID_1 = require("./normalizedMetaSchemaID");
var validatorBinder_1 = require("./validatorBinder");
// default options
exports.defaultOutputFormat = 'flag';
exports.defaultFailFast = false;
exports.defaultAssertFormat = false;
exports.defaultDefaultMetaSchemaID = draft_2020_12_1.metaSchemaID;
function jsonValidator(schema, options) {
    var _a, _b, _c, _d, _e;
    var outputFormat = (_a = options === null || options === void 0 ? void 0 : options.outputFormat) !== null && _a !== void 0 ? _a : exports.defaultOutputFormat;
    var failFast = outputFormat === 'flag' ? true : (_b = options === null || options === void 0 ? void 0 : options.failFast) !== null && _b !== void 0 ? _b : exports.defaultFailFast; // flag output format is effectively the same as fail fast
    var assertFormat = (_c = options === null || options === void 0 ? void 0 : options.assertFormat) !== null && _c !== void 0 ? _c : exports.defaultAssertFormat;
    var defaultMetaSchemaID = (0, normalizedMetaSchemaID_1.normalizedMetaSchemaID)((_d = options === null || options === void 0 ? void 0 : options.defaultMetaSchemaID) !== null && _d !== void 0 ? _d : exports.defaultDefaultMetaSchemaID);
    if (typeof schema === 'boolean') {
        var validator_1 = (0, booleanValidator_1.booleanValidator)(schema, [''], { outputFormat: outputFormat });
        return function (instance) {
            return validator_1(instance, '');
        };
    }
    // Index root schema
    var index = new json_schema_1.SchemaIndex({
        cloned: false,
        retrieve: options === null || options === void 0 ? void 0 : options.retrieve,
        defaultMetaSchemaID: defaultMetaSchemaID
    });
    var addRootSchemaResult = index.addRootSchema(schema, (_e = options === null || options === void 0 ? void 0 : options.baseURI) !== null && _e !== void 0 ? _e : '');
    return (0, promises_1.chain)(addRootSchemaResult, function () {
        var validatorsForMetaSchemaID = (0, keywordValidators_1.keywordValidatorsForMetaSchemaIDFactory)({
            assertFormat: assertFormat,
            retrieve: index.retrieve
        });
        var boundValidatorForSchema = (0, validatorBinder_1.validatorBinder)(index, {
            outputFormat: outputFormat,
            failFast: failFast,
            validatorsForMetaSchemaID: validatorsForMetaSchemaID
        });
        var boundValidator = boundValidatorForSchema(schema, ['']);
        return function validateInstance(instance) {
            return boundValidator(instance, '');
        };
    });
}
exports.jsonValidator = jsonValidator;
function jsonValidatorAsync(schema, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, jsonValidator(schema, options)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.jsonValidatorAsync = jsonValidatorAsync;
function validateJSON(instance, schema, options) {
    var validator = jsonValidator(schema, options);
    return (0, promises_1.chain)(validator, function (validator) {
        var output = validator(instance);
        if (!output.valid) {
            var message = 'message' in output ? output.message : 'is invalid';
            throw new ValidationError_1.ValidationError("The value ".concat(message), { output: output });
        }
    });
}
exports.validateJSON = validateJSON;
function validateJSONAsync(instance, schema, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, validateJSON(instance, schema, options)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.validateJSONAsync = validateJSONAsync;
function isJSONValid(instance, schema, options) {
    var validator = jsonValidator(schema, __assign(__assign({}, options), { failFast: true }));
    return (0, promises_1.chain)(validator, function (validator) {
        var valid = validator(instance).valid;
        return valid;
    });
}
exports.isJSONValid = isJSONValid;
function isJSONValidAsync(instance, schema, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isJSONValid(instance, schema, options)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.isJSONValidAsync = isJSONValidAsync;
