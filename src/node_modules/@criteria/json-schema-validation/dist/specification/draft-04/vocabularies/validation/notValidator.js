"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.formatMessage = exports.notValidator = void 0;
function notValidator(schema, schemaPath, context) {
    if (!('not' in schema)) {
        return null;
    }
    var not = schema['not'];
    var validator = context.validatorForSchema(not, __spreadArray(__spreadArray([], __read(schemaPath), false), ['/not'], false));
    var schemaLocation = schemaPath.join('');
    return function (instance, instanceLocation, annotationResults) {
        var output = validator(instance, instanceLocation);
        if (output.valid) {
            return {
                valid: false,
                schemaLocation: schemaLocation,
                schemaKeyword: 'not',
                instanceLocation: instanceLocation,
                message: formatMessage()
            };
        }
        else {
            return {
                valid: true,
                schemaLocation: schemaLocation,
                schemaKeyword: 'not',
                instanceLocation: instanceLocation
            };
        }
    };
}
exports.notValidator = notValidator;
function formatMessage() {
    return 'should not validate against subschema';
}
exports.formatMessage = formatMessage;
