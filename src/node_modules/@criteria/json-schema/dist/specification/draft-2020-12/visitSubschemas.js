"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.visitSubschemas = void 0;
var json_pointer_1 = require("@criteria/json-pointer");
function appendJSONPointer(path, jsonPointer) {
    return __spreadArray(__spreadArray([], __read(path.slice(0, -1)), false), ["".concat(path[path.length - 1]).concat(jsonPointer)], false);
}
function visitSubschemas(document, initialState, visitor) {
    // detects circular references
    var seen = new WeakSet();
    var visitMap = function (map, path, states) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.entries(map)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], subschema = _d[1];
                var stop = Boolean(visitSubschema(subschema, appendJSONPointer(path, "/".concat((0, json_pointer_1.escapeReferenceToken)(key))), states));
                if (stop) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    var visitList = function (list, path, states) {
        for (var index = 0; index < list.length; index++) {
            var stop = Boolean(visitSubschema(list[index], appendJSONPointer(path, "/".concat(index)), states));
            if (stop) {
                return true;
            }
        }
        return false;
    };
    var visitSubschema = function (subschema, path, states) {
        var newState = __assign({}, states[states.length - 1]);
        states = __spreadArray(__spreadArray([], __read(states), false), [newState], false);
        if (typeof subschema === 'boolean') {
            return Boolean(visitor(subschema, path, newState));
        }
        if (seen.has(subschema)) {
            return false;
        }
        seen.add(subschema);
        var stop = Boolean(visitor(subschema, path, newState));
        if (stop) {
            return true;
        }
        // TODO: get metaschema before recursing into keywords
        var $defs = subschema.$defs, $ref = subschema.$ref, $dynamicRef = subschema.$dynamicRef, allOf = subschema.allOf, anyOf = subschema.anyOf, oneOf = subschema.oneOf, not = subschema.not, ifSchema = subschema["if"], thenSchema = subschema.then, elseSchema = subschema["else"], dependentSchemas = subschema.dependentSchemas, prefixItems = subschema.prefixItems, items = subschema.items, contains = subschema.contains, properties = subschema.properties, patternProperties = subschema.patternProperties, additionalProperties = subschema.additionalProperties, propertyNames = subschema.propertyNames, unevaluatedItems = subschema.unevaluatedItems, unevaluatedProperties = subschema.unevaluatedProperties, contentSchema = subschema.contentSchema, restWithDeprecated = __rest(subschema, ["$defs", "$ref", "$dynamicRef", "allOf", "anyOf", "oneOf", "not", "if", "then", "else", "dependentSchemas", "prefixItems", "items", "contains", "properties", "patternProperties", "additionalProperties", "propertyNames", "unevaluatedItems", "unevaluatedProperties", "contentSchema"]);
        if (!stop && $defs !== undefined) {
            stop = visitMap($defs, __spreadArray(__spreadArray([], __read(path), false), ['/$defs'], false), states);
        }
        if (!stop && $ref !== undefined && typeof $ref === 'object') {
            stop = visitSubschema($ref, __spreadArray(__spreadArray([], __read(path), false), ['/$ref'], false), states);
        }
        if (!stop && $dynamicRef !== undefined && typeof $dynamicRef === 'object') {
            stop = visitSubschema($dynamicRef, __spreadArray(__spreadArray([], __read(path), false), ['/$dynamicRef'], false), states);
        }
        if (!stop && allOf !== undefined) {
            stop = visitList(allOf, __spreadArray(__spreadArray([], __read(path), false), ['/allOf'], false), states);
        }
        if (!stop && anyOf !== undefined) {
            stop = visitList(anyOf, __spreadArray(__spreadArray([], __read(path), false), ['/anyOf'], false), states);
        }
        if (!stop && oneOf !== undefined) {
            stop = visitList(oneOf, __spreadArray(__spreadArray([], __read(path), false), ['/oneOf'], false), states);
        }
        if (!stop && not !== undefined) {
            stop = visitSubschema(not, __spreadArray(__spreadArray([], __read(path), false), ['/not'], false), states);
        }
        if (!stop && ifSchema !== undefined) {
            stop = visitSubschema(ifSchema, __spreadArray(__spreadArray([], __read(path), false), ['/if'], false), states);
        }
        if (!stop && thenSchema !== undefined) {
            stop = visitSubschema(thenSchema, __spreadArray(__spreadArray([], __read(path), false), ['/then'], false), states);
        }
        if (!stop && elseSchema !== undefined) {
            stop = visitSubschema(elseSchema, __spreadArray(__spreadArray([], __read(path), false), ['/else'], false), states);
        }
        if (!stop && dependentSchemas !== undefined) {
            stop = visitMap(dependentSchemas, __spreadArray(__spreadArray([], __read(path), false), ['/dependentSchemas'], false), states);
        }
        if (!stop && prefixItems !== undefined) {
            stop = visitList(prefixItems, __spreadArray(__spreadArray([], __read(path), false), ['/prefixItems'], false), states);
        }
        if (!stop && items !== undefined) {
            stop = visitSubschema(items, __spreadArray(__spreadArray([], __read(path), false), ['/items'], false), states);
        }
        if (!stop && contains !== undefined) {
            stop = visitSubschema(contains, __spreadArray(__spreadArray([], __read(path), false), ['/contains'], false), states);
        }
        if (!stop && properties !== undefined) {
            stop = visitMap(properties, __spreadArray(__spreadArray([], __read(path), false), ['/properties'], false), states);
        }
        if (!stop && patternProperties !== undefined) {
            stop = visitMap(patternProperties, __spreadArray(__spreadArray([], __read(path), false), ['/patternProperties'], false), states);
        }
        if (!stop && additionalProperties !== undefined) {
            stop = visitSubschema(additionalProperties, __spreadArray(__spreadArray([], __read(path), false), ['/additionalProperties'], false), states);
        }
        if (!stop && propertyNames !== undefined) {
            stop = visitSubschema(propertyNames, __spreadArray(__spreadArray([], __read(path), false), ['/propertyNames'], false), states);
        }
        if (!stop && unevaluatedItems !== undefined) {
            stop = visitSubschema(unevaluatedItems, __spreadArray(__spreadArray([], __read(path), false), ['/unevaluatedItems'], false), states);
        }
        if (!stop && unevaluatedProperties !== undefined) {
            stop = visitSubschema(unevaluatedProperties, __spreadArray(__spreadArray([], __read(path), false), ['/unevaluatedProperties'], false), states);
        }
        if (!stop && contentSchema !== undefined) {
            stop = visitSubschema(contentSchema, __spreadArray(__spreadArray([], __read(path), false), ['/contentSchema'], false), states);
        }
        // deprecated but still supported, TODO: verify
        var _a = restWithDeprecated, additionalItems = _a.additionalItems, definitions = _a.definitions, dependencies = _a.dependencies, rest = __rest(_a, ["additionalItems", "definitions", "dependencies"]);
        if (!stop && additionalItems !== undefined) {
            stop = visitSubschema(additionalItems, __spreadArray(__spreadArray([], __read(path), false), ['/additionalItems'], false), states);
        }
        if (!stop && definitions !== undefined) {
            stop = visitMap(definitions, __spreadArray(__spreadArray([], __read(path), false), ['/definitions'], false), states);
        }
        if (!stop && dependencies !== undefined) {
            stop = visitMap(dependencies, __spreadArray(__spreadArray([], __read(path), false), ['/dependencies'], false), states);
        }
        return stop;
    };
    visitSubschema(document, [''], [initialState]);
}
exports.visitSubschemas = visitSubschemas;
